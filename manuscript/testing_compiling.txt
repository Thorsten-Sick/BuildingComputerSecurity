# Testing compiling features {#chapter-testing-compiling}

As many mitigation features are kind of invisible you will needs tools
to test the binary before release.

You want to automatically test:

* Is this a beta release or the real one ?
* Is it a debug release ? (with or without debug symbols)
* Is ASLR on ?
* Are there additional dependencies ?
    * linked libs ?
    * attached info (see there)

Having prepared a set of tools for manual verification plus a automatic test
at least before the binaries are shipped is very smart.

## Audience

Developers and Testers

## Linux

On Linux a tool to verify the hardening settings is *hardening-check* which can
be found here:

https://github.com/ProhtMeyhet/hardening-check

It will check for:

* PIE (ASLR)
* Stack protection
* Fortified source
* Read-only relocations (relro)
* Immediate binding

Testing specifically for **immediate binding**:

{lang="bash"}
    readelf -d program | grep BIND

On a secure program you will get something like:

{lang="bash"}
    0x000000000000001e (FLAGS)              BIND_NOW

Insecure programs will return nothing.

If you do not get the BIND_NOW (which would indicate *full relro*)
you can still check for *partial relro*:

{lang = "bash"}
    objdump -x program|grep RELRO


Checking for **forgotten debug symbols** in a secure program:

{lang="bash"}
    >objdump --syms program

    program:     file format elf64-x86-64

    SYMBOL TABLE:
    no symbols

If you see anything else (especially a list of symbols) you forgot them in
the binary. Remove them by calling *strip*.

%% Also relevant for "elf_format.wip": https://linux-audit.com/elf-binaries-on-linux-understanding-and-analysis/

%% Todo: ldd and lddtree

%% TODO: apt install pax-utils; scanelf

## Windows

Check for ASLR, DEP, SafeSEH, ... in Windows binaries

https://github.com/NetSPI/PESecurity

%% .. TODO: Test


## Attached info

It is possible to attach an info blob (like xml) to a PE and ELF file.
Your compiler could create that and your release system verify it. It can
contain things like a "beta" flag - to avoid accidentally release a beta on
the stable update channel and version numbers. Or it could be a list of
dependencies (modules and their version) to other components you offer.

Of course this can also be achieved by registering the binary in your file
database by sha256 and putting the flags in there.
