
av-test threat intelligence: https://av-atlas.org

Hacking Security EBooks: https://github.com/yeahhub/Hacking-Security-Ebooks

%% TODO id-ransomware.malwarehunterteam.com


Open Threat intelligence sharing: https://www.ssi.gouv.fr/en/actualite/opencti-the-open-source-solution-for-processing-and-sharing-threat-intelligence-knowledge/

Kaspersky (blog + threat intelligence platform): https://eugene.kaspersky.com/2019/10/24/open-tip/

https://pan-unit42.github.io/playbook_viewer/

---------------

https://github.com/cs01/gdbgui/


Binary analysis: https://github.com/securing/DumpsterDiver


Social engineering business case: https://www.europol.europa.eu/newsroom/news/eur-8-million-700-bank-accounts-and-money-mules-little-known-tricks-of-social-engineering-fraudsters


Anti-AV service: https://hotforsecurity.bitdefender.com/blog/russian-hacker-gets-35-years-in-prison-for-running-counter-av-service-19925.html





%% %%%%%%%%%% Throwhammer / Rowhammer

https://www.cs.vu.nl/~herbertb/download/papers/throwhammer_atc18.pdf

%% TODO: exec and eval are evil


## Bug crowd platforms

https://www.heise.de/newsticker/meldung/Crowd-Plattformen-fuer-Suche-nach-Software-Luecken-wollen-mehr-Rechtssicherheit-4165084.html

## Compiler flags:
https://lwn.net/Articles/718888/




## Browser/pwds

https://www.golem.de/news/mozilla-firefox-monitor-informiert-ueber-gehackte-passwoerter-1809-136789.html

## Cyber Lagebild
https://www.bka.de/SharedDocs/Downloads/DE/Publikationen/JahresberichteUndLagebilder/Cybercrime/cybercrimeBundeslagebild2017.html?nn=28110


# CAN: http://www.volkspage.net/technik/ssp/ssp/SSP_238.pdf

# https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf


# Bash tricks: https://twitter.com/b0rk/status/1000208860060307456?s=09


# Safestring lib: https://github.com/intel/safestringlib

# Dependency check: https://github.com/jeremylong/DependencyCheck
# Currently, Java and .NET are supported; additional experimental support has been added for Ruby, Node.js, Python, and limited support for C/C++ build systems (autoconf and cmake).


https://github.com/google/nogotofail


# Signing software packages
https://github.com/jedisct1/minisign

# File transfer
https://github.com/warner/magic-wormhole

# Tarsnap: Encrypted backups
https://www.tarsnap.com/

# Encrypt application data
https://download.libsodium.org/doc/





# Paste jacker (Clipboard)
https://github.com/D4Vinci/PasteJacker

# DarkSpiritz

Pen testing framework
https://github.com/DarkSpiritz/DarkSpiritz


# Python Nubia
https://github.com/facebookincubator/python-nubia/


# Python C-structure parsing
https://github.com/fox-it/dissect.cstruct







# https://twitter.com/TinkerSec/status/1053732641374199809?s=09
"There is “Deterrence” and there is “Protection”. Deterrence seeks to stop Opportunistic Attacks by altering the *perceived* hardness of a target. Protection seeks to stop Targetted Attacks by offering actual hardness. This may stop opportunistic attacks, but not targeted.
"

Red teaming:
Post exploitation: https://phoenhex.re/2018-08-26/csgo-fuzzing-bsp
Guide to pivoting: https://artkond.com/2017/03/23/pivoting-guide/
Toolkit: https://silentbreaksecurity.com/introducing-the-red-team-toolkit/


For Fun:
NES CSS: https://bcrikko.github.io/NES.css/

---------------------
Diagrams:
Zenuml.com

# Inkscape by Ange
https://speakerdeck.com/ange/an-introduction-to-inkscape

- Dot
https://github.com/bbc/bbplot
https://bbc.github.io/rcookbook/

Python seaborn uses matplotlib for statistics
Python http://altair-viz.github.io/ for statistics (seems more powerful than seaborn)


Mermaidjs.github.io  https://mermaidjs.github.io/
http://plantuml.com/
https://casual-effects.com/markdeep/
Railroad diagrams: https://bottlecaps.de/rr/ui


-----------------
Print on demand:
https://www.bod.de/
https://pressbooks.com/for-authors/
http://www.booksandtales.com/pod/index.php
https://www.epubli.de/
https://www.bookmundo.de/
http://www.bookmarket.com/ondemand.htm
lulu.com
packt publishing ?
----------
Fonts:

https://fontawesome.com (icons)
"Alle gut hackbar":
https://www.fontzillion.com/fonts/barmee/afarat_ibn_blady

Samurai Font (Brush Font)
https://creativemarket.com/nurrehmettt/2646145-Fujimaru-Ninjas-Brush-Font

-------------
Photos/Diagrams/Icons for presentations

https://creativemarket.com/

istockphoto.com

Free:
https://www.pexels.com/
https://www.pixelio.de/
https://pixabay.com/
https://search.creativecommons.org/

-----------
%% TODO: Anti Virus guidelines https://www.adlice.com/making-an-antivirus-engine-the-guidelines/
Visuals
https://www.openideo.com/challenge-briefs/cybersecurity-visuals

--------------
Backgrounds:

https://www.templatemonster.com/blog/free-background-generators

Generators:
https://dragdropsite.github.io/waterpipe.js

---------------

%% TODO: Secret knowledge https://github.com/trimstray/the-book-of-secret-knowledge


%% TODO: More on DDOS


-----------------
Visual studio security flags: https://docs.microsoft.com/en-us/cpp/build/reference/safeseh-image-has-safe-exception-handlers?view=vs-2017

-------------- Chapter Anonymity

------------- Chapter for post attack
http://pwnwiki.io/#!index.md


Suricata Threat intelligence tool Open source

pwndb: Stolen Credentials. https://github.com/davidtavarez/pwndb


-------
(1/2) EXTRACT & CRACK WINDOWS BITLOCKER:
STEP 1: Use dd to extract image of your BitLocker encrypted device: sudo dd if=/dev/disk2 of=/path/to/bitlockerimage conv=noerror,sync
STEP 2: Extract the hash using bitlocker2john: bitlocker2john –i /path/to/bitlockerimage > hash.txt
2/2) EXTRACT & CRACK WINDOWS BITLOCKER:
STEP 4: Use JTR to crack the bitlocker hash: john --format=bitlocker-opencl --wordlist=dict.txt hash.txt

https://openwall.info/wiki/john/OpenCL-BitLocker

https://www.amazon.com/dp/1793458618


--------------- CSRF cheat sheet

https://trustfoundry.net/cross-site-request-forgery-cheat-sheet/


----------------
Dynamic analysis of running processes:

github.com/hasherezade/pe-sieve
github.com/hasherezade/hollows_hunter

https://github.com/Neo23x0/Loki

--------------- Infrastruktur stress test / Chaos Engineering

tools:
* stress https://linux.die.net/man/1/stress
* tc (traffic control) https://linux.die.net/man/8/tc
* pumba (for docker) https://github.com/alexei-led/pumba
* http://principlesofchaos.org
* Book "Chaos Engineering"


--------------------------
RTF File handling

https://github.com/DidierStevens/DidierStevensSuite/blob/master/rtfdump.py
