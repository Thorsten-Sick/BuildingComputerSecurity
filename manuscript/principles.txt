# Principles

%% State: 70 % Principles

%% TODO: Create visualisation for dependencies using https://python-graph-gallery.com/ or https://www.r-graph-gallery.com/

There is a list of the most basic principles you can build security on.
These principles are very abstract, but are the basics for building more specific tools.
This is not a complete list.

## Threat modelling


Do threat modelling.

* Who will attack your technology ?
* What is the goal of this person (data, money, ...)
* Which resources can this person gather ?

You will not be able to protect your tech against the most sophisticated
attackers. But very likely you will not have to. Threat Modelling will help you there

%% .. TODO: details on threat modelling

%% .. TODO hollywood threat

## Reduce Attack Surface

Attack surface is everything that can be reached from the outside.
This is servers, interfaces, network connections. What do you really need ?
How to put steel plates on the others ? How to reduce the potential impact ?
Who do you trust ?

## Flexibility

Whatever you do: Be flexible. Expect the attacker to find a trick against your
tools the next weeks. Have a plan how to handle that situation ready. Expect
the attacker to do something unexpected. Plan for flexibility.

## Do not make mistakes

"Bitte immer alles richtig machen" in German. This is the core principle
especially in Design and Coding. It kind of sounds obvious and boring. But there
are ways to engineer fault-reduction by tools and processes. Not only be coffee.

## Update ASAP

After a vendor created a patch it takes the bad guys a few hours to
reverse engineer the patch and find the vulnerability which has just been patched.
Within days there are attacks. Update everything ASAP. Especially if it is
network connected.

## De-centralisation

De-centralise everything. entralised components (servers) can be DDOS-ed.
Will your IoT device still work when the server is down ?
Could you add fallback servers to the plan ?
Could the user override the server for a short time (and still open his IoT lock)

## Fail gracefully

Do you want your system to fail-close or fail-open ? What does the door lock
do when there is a power outage ? Lock or Open ? Plan these failures and
the consequences. How can these failures triggered and by whom ?

## Compartmentalisation / Segementation

Segment your system. Define narrow communication channels.
Maybe they can be one-way (data-diodes). Possible segments can be:

* Multiple isolated VMs on a machine
* Multiple isolated processes on an OS
* Multiple isolated network segments
* Sandbox the processes

Dropping privileges is a part of that.

## Monitor / Incident Response

Monitor security incidents, create logs of strange events.
This enables you to respond ("incident response") when something happens. And to
learn from the incidents. And do forensic analysis afterwards. Learn from th
mistakes and improve. Monitors should be write only and segmentationed away.
Attackers may spam the logs to hide their tracks.

%% .. TODO: Read "Intelligence driven Incident Response"

## Educate users

Educate users. In an automated way (E-learning). This is no magic bullet.
Also: Do not use as cover-your-ass security.
Educating users is a respectful approach. Respect their intelligence.

## Bolt-on-security aka detection

Detecting attacks is a typical bolt-on way of security.
Anti-Virus, Network intrusion detection, behaviour detection, ...
This kind of things.
It is opposed to "security by design". If possible: Go for "security by design".
Sometimes you can't...then the fallback is bolt-on-security.

Adding bolt-on-security increases complexity. But has benefits.
Add it to the outer perimenter to reduce the normal "internet noise" of attacks.
This will reduce your monitor-log reports.
Add it to the innermost perimenter to detect attacks that bypassed your protection.
Handle the increased complexity by segmenting the bolt-on-security away.
A Sandbox and maybe a separate system will do.

## Security by Obscurity

A bad idea. There are tools (IDA plus hexrays, for example) that help to
reverse engineer executables. If any security depends on secrecy it will break
as soon as an experienced person attacks it. While you maybe are an
experienced engineer but not an experienced attacker the guys your tools will
face have the skillset switched: experienced attacker, ok-ish engineer.
This is why they became attackers.

%% .. TODO: Separate the principles from official tools /processes

## Microsoft SDL

https://www.microsoft.com/en-us/sdl

## STRIDE

The Microsoft checklist for Threat Modelling:

https://msdn.microsoft.com/en-us/library/ee823878(v=cs.20).aspx

.. TODO: Add details

## OWASP Embedded Application Security Project

https://www.owasp.org/index.php/OWASP_Embedded_Application_Security
