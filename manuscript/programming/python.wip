Secure python programming

After the switch to Python3 many new processes got developed. They allow
security checks.

So there is lots of new ways to ensure python security and a high program quality.

First things first: I am collecting best practice here. And while doing that
I got shocked.

Every single tool is reasonable and covers real issues.
But the total sum of the tools needed for a large project increases the
total complexity of the project itself.

Which has negative side effects:

* Stability (of the build process)
* Higher entry level for contributors
* Maybe even new security issues

Choose wisely which combination of tools you want to use.

%% TODO: First tests those techs with a really big python program !

%% Book: "The Hitchhiker's Guide to Python" for modern python processes

%% https://geekflare.com/find-python-security-vulnerabilities/
%% https://medium.com/@prasincs/open-source-static-analysis-for-security-in-2018-part-1-python-348e9c1af1cd

## Virtualenv build environment

%% TODO: https://docs.python-guide.org/dev/virtualenvs/

{lang="bash"}
    pip freeze > requirements.txt
    pip install -r requirements.txt  # To install those later

Modern ways to handle bigger python projects is to use a virtualenv. And a
simplification wrapper around both *pip* and *virtualenv* is *pipenv*

{lang="bash"}
    pipenv --three install requests

Installs requests for this project. *--three* starts a python 3 environment.

Switching to it is done by

{lang="bash"}
    pipenv shell
    pipenv install -r requirements.txt   # Install requirements.txt content
    exit   # Exit pipenv shell

Now we have a VCS safe way to handle requirements and to update them on all
build and development systems.

The requirements.txt file can be quite flexible. Another smart idea is to
have two files for those requirements.

One is stable, one is for development (*devel-req.txt* and *stable-req.txt*).

That way we can experiment with new library versions without breaking anything.

### Code Coverage

The tool [Coverage](https://coverage.readthedocs.io/en/v4.5.x/) offer code coverage. Which is important as a base
measurement to roll out unit tests and similar.

To run your program in coverage, call:

{lang="bash"}
    pipenv intall coverage
    coverage run myprogram.py
    coverage html
    firefox htmlcov/index.html

To run coverage together with *pytest* (covered later) switch into the python
environment and run:

{lang="bash"}
    coverage run -m pytest

This will generate a code coverage of your unit tests.

### Packaging

Tox will require proper packaging.

%% TODO: https://packaging.python.org/tutorials/packaging-projects/

### Tox

We currently have the situation of python 2 to python 3 migration. Even in
the future without python 2 there will be (smaller) differences between
python versions.

Unit tests must run on all python versions supported by your software. *Tox*
automates this.

Tox can be set upt by running

{language="bash"}
    tox-quickstart

But it requires a *setup.py* file.

### Flake8 coding style verification

In some teams coding style discussions can take away lots of valuable time
 from code reviews it could be smart to automatically check the coding style.

 *flake8* is the python tool to do that.

It can run without configuration. But with larger projects, it could be smart
to have a project specific configuration in the *.flake8* file (or your tox.ini).

Just leaving this idea here. It helped me once.

[flake8](https://pypi.org/project/flake8/)

### Safety

The [safety](https://pyup.io/safety) tool is a dependency checker. It checks
your project for vulnerable libraries.

{lang="bash"}
    pipenv install safety
    safety check -r requirements.txt
    safety check    # To check installed libraries

Safety has lots of features. Especially those that will help you to insert it
into your build chain (Docker, Travis, GitHub).

The free database is updated once a month. You can buy an API key for faster
DB updates.


### Bandit, static code analysis

[Bandit](https://github.com/PyCQA/bandit) is a tool to identify typical
vulnerabilities by static code analysis.

It can be configured by putting a *.bandit* file into the project path.

As it can be extended using python plugins, it is very flexible.


%% TODO: Other tools, available on github as a service
%% [Code quality for python](https://landscape.io)
%% [Code coverage](https://codecov.io)
%% [Code review](https://www.codefactor.io)
%% [Travis build system](https://travis-ci.org/)
