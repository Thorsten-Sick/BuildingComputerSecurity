Secure python programming

After the switch to Python3 many new processes got developed. They allow
security checks.

So there is lots of new ways to ensure python security.

%% TODO: First tests those techs with a really big python program !

%% Book: "The Hitchhiker's Guide to Python" for modern python processes

%% https://docs.python-guide.org/dev/virtualenvs/
%% https://geekflare.com/find-python-security-vulnerabilities/
%% https://medium.com/@prasincs/open-source-static-analysis-for-security-in-2018-part-1-python-348e9c1af1cd



## Dependency check

The tool [safety]() does dependency checks. It requires a *requirements.txt* file.
This can be generated by calling *pip* with

{lang="bash"}
    pip freeze > requirements.txt
    pip install -r requirements.txt  # To install those later

Modern ways to handle bigger python projects is to use a virtualenv. And a
simplification wrapper around both *pip* and *virtualenv* is *pipenv*


{lang="bash"}
    pipenv install requests

Installs requests for this project. Switching to it is done by

{lang="bash"}
    pipenv shell
    pipenv install -r requirements.txt   # Install requirements.txt content
    exit   # Exit pipenv shell

Now we have a VCS safe way to handle requirements and to update them on all
build and development systems.


### Safety

The [safety](https://pyup.io/safety) tool is a dependency checker.

{lang="bash"}
    pipenv install safety
    safety check -r requirements.txt

Safety has lots of features. Especially those that will help you to insert it
into your build chain (Docker, Travis, GitHub).

The free database is updated once a month. You can buy an API key for faster
DB updates.


### Bandit, static code analysis

%% Todo: Tool "Bandit" https://github.com/openstack/bandit
