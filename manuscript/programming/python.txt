# Secure python programming {#chapter-python-security}

Python does not deal with pointers to memory (a constant source of issues in C-Languages) or is flexible/crazy like JavaScript. But even a simple and deterministic language without complex memory handling can have tricky areas causing security issues.

And some of them are very similar to what is known from the other languages.

As **robust** code is more **secure** code those tools simplify the development process, hunt down bugs *and* fix security issues.

Especially looking at the transition from python 2 to python 3 (which is not over yet) those tools are needed to verify changed code.

The steps needed are similar to those for other programming languages:

* Code coverage
* Unit tests
* Coding style
* Dependency check
* Static code analysis

With two versions of python and not statically compiled in libraries there is a large set of python interpreter/library combinations that add additional complexity and requires special tools.

* Tox - test automation for different combinations
* Virtualenv as a simple python specific container for dependencies

With all those tools there is lots of new ways to ensure python security and a high code quality.

And you will not necessarily need all of it.

I am collecting best practice here. And while doing that I got shocked.

Every single tool is reasonable and covers real issues.
But the total sum of the tools needed for a large project increases the total complexity of the project itself.

Which has negative side effects:

* Stability (of the build process)
* Higher entry level for contributors
* Maybe even new security issues

This complexity is expensive especially if your project is small and simple. The complexity of the tools should not exceed the complexity
of the project itself.

Choose wisely which combination of tools you want to use.

%% Book: "The Hitchhiker's Guide to Python" for modern python processes
%% Online version: https://docs.python-guide.org/

%% https://geekflare.com/find-python-security-vulnerabilities/
%% https://medium.com/@prasincs/open-source-static-analysis-for-security-in-2018-part-1-python-348e9c1af1cd


## Virtualenv build environment

Virtualenv is a way to handle several python projects on your system in parallel without installing the dependencies globally. This prevents the classic "dll hell" of Windows.

To install and create a virtual environment in you project folder execute:

{lang="bash"}
    sudo apt-get install python3-venv
    python3 -m venv venv      # Creates the venv sub folder
    source venv/bin/activate  # Activates the environment
    deactivate                # De-activate the virtual environment

In this virtual environment you can now use pip to install requirements and export them to a requirements file:

{lang="bash"}
    pip3 install flask
    pip3 freeze > requirements.txt  # Export your installed requirements to a file

Installing all requirements in a requirements.txt files can be done by:

{lang="bash"}
    pip3 install -r requirements.txt   # Install requirements.txt content

Now we have a VCS safe way to handle requirements and to update them on all build and development systems.

The requirements.txt file can be quite flexible. Another smart idea is to have two files for those requirements.

One is stable, one is for development (*devel-req.txt* and *stable-req.txt*).

That way we can experiment with new library versions without breaking anything.

More on [venvs](https://docs.python.org/3/library/venv.html)

## Unit tests

There are several unit test libraries for python. Basic features are the same everywhere. But to give you some idea about the potential I will describe the feature set of [unittest](https://docs.python.org/3/library/unittest.html) here:

* Basic unit tests
* Unit tests that can be discovered (place several unit test files in folder *tests* and call *unittest discover -s tests* to execute them)
* Your tests can asserts on function return values
* *Unittest* can assert on exceptions raised
* Classes and methods can be mocked
    * return values
    * exceptions raised
    * test for parameters they got called with

To verify if  enough code is checked by *unittest* you should use the tool coverage

## Code Coverage

The tool [Coverage](https://coverage.readthedocs.io/en/v4.5.x/) offers code coverage. Which is important as a base measurement to create unit tests and similar.

To run your program in coverage, call:

{lang="bash"}
    pip3 install coverage
    coverage run myprogram.py
    coverage html
    firefox htmlcov/index.html

To run coverage together with *unittest* switch into the python environment and run:

{lang="bash"}
    coverage run --source=app -m unittest discover -s tests

This will generate a code coverage of your unit tests. Taking into account all you source files in the *app* folder.

## Flake8 coding style verification

In some teams coding style discussions can take away lots of valuable time from code reviews it could be smart to automatically check the coding style.

*flake8* is the python tool to do that.

It can run without configuration. But with larger projects, it could be smart to have a project specific configuration in the *.flake8* file (or your tox.ini).

Just leaving this idea here. It helped me once to focus our meetings and code reviews on learning and real issues, not on coding style.

[flake8](https://pypi.org/project/flake8/)

## Safety

The [safety](https://pyup.io/safety) tool is a dependency checker. It checks your project for vulnerable modules. This is essential for secure and robust code. It just does not spark glamour - but gets the job done (which is more important).

{lang="bash"}
    pip3 install safety
    safety check -r requirements.txt
    safety check    # To check installed libraries

*Safety* has lots of features. Especially those that will help you to insert it into your build chain (Docker, Travis, GitHub).

The free database is updated once a month. You can buy an API key for faster DB updates.

If you have to update your requirements.txt, you can use a tool like [upgrade-requirements](https://pypi.org/project/upgrade-requirements/) to simplify your life

## Bandit, static code analysis

[Bandit](https://github.com/PyCQA/bandit) is a tool to identify typical vulnerabilities by static code analysis. It can be configured by putting a *.bandit* file into the project path. If the large feature set it offers by default is not enough for you:  it can be extended using python plugins.

{lang="bash"}
    pip3 install bandit
    bandit -r path/to/your/code

It is possible to disable bandit on a specific line of code. Please properly review it before de-activation !

The *nosec* command does the trick here.

{lang="python"}
    def example(args):  # nosec
        """ An example where args is not used in the code but still an argument passed to the function """

        print("That's all folks")

%% TODO: Bandit supports plugins

## Pylint, stricter than flake8

A linter which adds more detection on top of flake8 is pylint. It can be quite noisy (even without using the option to extend it with own plugins).
For that reason it is wise to add it last (as soon as the flake8 warnings are fixed) and use a config file with exceptions for warnings you decide to ignore.

To generate a configuration file:

%% TODO: Add installation

{lang="bash"}
    pylint --generate-rcfile > pylint.rc

To scan using this configuration:

{lang="bash"}
    pylint --rcfile=pylint.rc  *.py

To get help for specific reported issues:

{lang="bash"}
    pylint --help-msg=missing-module-docstring

Maybe you do not want to add it to the automated, enforced test prior to every release. Then use it as a tool to improve code quality by starting it manually.

It is also possible to disable specific warnings for a single line of code, a function or a block. To disable a warning for a function just add a specific comment:

{lang="python"}
    def example(args):  # pylint: disable=unused-argument, no-sef-use
        """ An example where args is not used in the code but still an argument passed to the function """

        print("That's all folks")

%% pylint can be extended by plugins. astroid package will help parsing the AST syntax tree


[Pylint documentation](http://pylint.pycqa.org/en/latest/user_guide/index.html)

### MyPy, static type checker

MyPy is a tool that can be run on code and check at "compile time" if type contracts are respected.
In Python 3 you can optionally annotate variables with the type they must be (and here you have lots of flexibility).
MyPy will then check if this is respected. Important: At runtime this is ignored - resulting in no behaviour changes in your runtime.
But it can support you a lot.
And you can use it partially: All APIs and interfaces between parts of the project developed by different people should be priority

{lang="bash"}
    mypy app/

There are many flags that make the checks more strict to find corner cases, For example "Optional" types can be None.
And MyPy can check if those variables are verified to be not None before their methods are used (for example). *--strict-optional* is doing that.

Will check the code in the folder app.

To toggle mypy off for a specific line of code, add *#type: ignore*. Some external libraries are not using type annotation yet.

{lang="python}
    from fabric import Connection  # type: ignore

[MyPy]](https://mypy-lang.org)

## Packaging with setup.py

Tox will require proper packaging. And setup.py is the traditional way to do packages.

[setup.py](https://packaging.python.org/tutorials/packaging-projects/) basics can be found here.

For all the [details visit](https://setuptools.readthedocs.io/en/latest/).

## Tox

All code should now be migrated from python 2 to python 3. But even if this is the case, there are (smaller) differences between python sub-versions.

Unit tests and other tests **must** run on all python versions supported by your software. And *Tox* automates this.

Tox can be bootstrapped by running

{language="bash"}
    tox-quickstart

It requires a *setup.py* file. See previous chapter. The result is a *tox.ini* file describing all the potential combinations of tests, python versions and modules.

Run it by calling

{language="bash"}
    tox

And it will create Virtualenvs for all potential system combinations and test your project.

Parts of the tox ini file that do the testing:

{language="ini"}
    [testenv]
    deps = -rrequirements.txt
            flake8
            safety
            bandit


    commands =
        coverage run --source=app -m unittest discover -s tests
        # Ignoring:
        # E501: line too long
        flake8 --ignore E501
        # Check if dependencies are vulnerable
        safety check -r requirements.txt
        # Bandit check for common vulnerabilities
        bandit -ll -r *.py app/

It contains:

* Unit tests
* Code coverage
* Flake8
* Safety: dependency check on requirements
* Bandit: Checks for common vulnerabilities


## Dependencies

Python dependencies are best handled using a virtualenv and a requirements.txt file whichs pins the exact version numbers to ensure reproducability.

The Safety tool is already scanning your dependencies for vulnerable ones. In addition you can also check for old ones or update your requirements.txt. There are two more tools for you to add to your build chain:

### pipdeptree

Displays a dependency tree (this includes the dependencies your depend on indirectly)

{lang="bash}
    pip install pipdeptree
    pipdeptree

You can set it to throw an error whenever there is a warning concerning old dependencies used in your project using:

{lang="bash"}
    pipdeptree -w fail

This is a bit drastic. Maybe you would prefer to have a weekly task to check dependencies, update them and test if your projects still works with the new versions (it should)

%% TODO: - pydeps for detailed dependencies

### pip-upgrade

To upgrade the pinned dependencies in your requirements.txt you can use pip-upgrade.

{lang="bash"}
    pip install pip-upgrade
    pip-upgrade requirements.txt

This will modify the file and pull the newest versions. Just run your automated tests afterwards to ensure everything is still working.

%% TODO: Add Robust Python https://learning.oreilly.com/library/view/robust-python/9781098100650/

%% TODO: pyre als erweiterung (daemon) fuer mypy
%% TODO: pysa als Erweiterung fuer Pyre (taint checker)

%% TODO: mccabe to measure complexity

%% TODO: https://python-poetry.org/

%% TODO: https://github.com/treebeardtech/pytest-deepcov
%% TODO: Other tools, available on GitHub as a service

%% TODO: See also profiling.wip for stuff that is cool but not relevant here



%% TODO: - pyan3 a static call graph generator
%% TODO: - "python -m cProfile -o deps.profile test.py" "gprof2dot --format=pstat deps.profile -o deps.dot" for run time call graph

%% TODO: PyPi supply chain attack: https://www.bleepingcomputer.com/news/security/researcher-hacks-over-35-tech-firms-in-novel-supply-chain-attack/

%% TODO: Python fuzzer https://github.com/google/atheris  (link to fuzzing)

%% ------------ not relevant

%% [Code quality for python](https://landscape.io)
%% [Code coverage](https://codecov.io)
%% [Code review](https://www.codefactor.io)
%% [Travis build system](https://travis-ci.org/)
