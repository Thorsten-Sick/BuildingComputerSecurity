# Coding {#chapter-coding}

%% State: 80 % Coding

Good code quality results in less bugs, more robust code and less security vulnerabilities. It is an essential foundation for a secure program.

## Tactics

During coding there are several tactics to improve code quality manually and by tools.
The tools are getting better and smarter every month - so it is worth re-visiting the documentation every few months.

But first we need a way to convince oeple to invest into code quality.
Investment is mostly time.

## Not wasting money

The earlier a bug is found the cheaper it is to fix it. Best would be before commit. Worst: After release and shipping. So put effort into finding them early and automatic.

Also: Watch out for design errors. A broken design could force you to re-write tons of code.

## Coding practice

### Pair programming/Code reviews

Have an experienced engineer (at least one) code review a beginner's code.
Be a good teacher and help your padawan. Focus on security issues first.
Start knit-picking coding style issues later. Everyone has a certain limit he can learn at a time. Teacher: prioritize and be gentle.
See yourself as "Jedi and Padawan".

Every team as is good as the weakest programmer - if there are no code reviews.

Pair programming: Depends on the personalities. It is hard to get into a flow doing pair programming. If some coders are not pair programming
personalities, find alternatives for reviews.

You can also automate the system of reviews by enforcing them before merge.
If your tool supports it: Do so.

### Code reviews

%% TODO: Similar chapter is in security_process.txt

A good source for a code review checklist is http://cwe.mitre.org/ (Common weakness enumeration).

I'd get the top 5 of those weaknesses (depending on what I expect to find in my
project's code). And start grepping for them. Low hanging fruit.

After that they should be added to the Coding Style document of the team.

Other secure coding standards can be found here:

## Code review guide

OWASP wrote a [code review guide](https://owasp.org/www-project-code-review-guide/). 

## Tools for code reviews

Use tools for code reviews (details in "compiling"). Static and Dynamic code
analysis can improve your code a lot. But do not trust them blindly. They will not find everything.


## Application Security Verification

Using [ASVS](https://owasp.org/www-project-application-security-verification-standard/) you should verify your application's security.
This can happen during design, when you do a PR at a code merge or at a special session.
ASVS is written for web applications and their pain points.

[MASVS](https://mas.owasp.org/MASVS/) is a similar project for Mobil applications.

A tool named [OWASP Security Knowledge Framework](https://owasp.org/www-project-security-knowledge-framework/) can be used to step you through the process. The data the process is based in are those two documents.

## Top 10 or 25 issues

Several organisations compiled lists of the top issues applications have.

* [OWASP Top 10](https://owasp.org/www-project-top-ten/) for web applications
* [Sans 25](https://www.sans.org/top25-software-errors/)

## General

%% TODO: Coding Guidelines


%% TODO: More

%% TODO: Secure coding standards



### Segmentation

Segmenting programs on a system protects the system from being hacked.

#### Seccomp

%% TODO: write more

The linux way of dropping privileges. At program start the program can drop privileges it does not need. This does not interfere. But if ever shellcode is injected, this shellcode is restricted to the permissions in this contract.


#### AppArmor

Exernal restrictions on program permissions set by the administrator (or maintainer). This prevents hacked programs from mis-behaving.

It is very strong on Ubuntu.

%% TODO: AppArmor write more

#### Reduce power of network tools

If you have pre-installed network tools (wget, ftp, telnet) on your system and a hacker gets in, he can use those for lateral movement and to get his
tools onto your system.

Depending on your setup it could be smart to reduce the computers those can access.

What you could want to block is:

* local network
* other servers than your https update servers

You could do the blocking by modifying the code of those tools or by AppArmor

Also: Maybe you could want to uninstall some of those tools....


%% TODO: [Intel/safestringlib](https://github.com/intel/safestringlib)

%% Secure C++ Coding: https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=637
%% https://www.securecoding.cert.org/confluence/display/c/SEI+CERT+C+Coding+Standard)

%% Secure Programming Book: https://www.dwheeler.com/secure-programs/

%% Static code analysis for c/C++/objective C and Java: https://fbinfer.com

%% Worst case execution time test too: https://www.absint.com
