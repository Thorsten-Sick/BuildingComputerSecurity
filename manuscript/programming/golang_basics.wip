# Golang basics

%% Idea: create a language overview. Rust and Golang get the same structure. Compare them. Make switching from C simpler.

My own collection of golang basics. Maybe we will get a golang security chapter (in a separate file) sooner or later.

Format Go using "gofmt" and lint using "golint"

# When to use it

* Mirrors Python
* web development
* databases
* network programming
* Garbage collection
* much more performant than python (slower than Rust)
* Memory safety built in
* Goroutines: concurrency (use it if you have multiple processors)
* Used at Google (large scale applications)

# IDE

Several IDEs are available. Atom is one:

{lang="bash"}
    sudo snap install atom --classic

Golang plugins:
The *go-plus* plugin
https://atom.io/packages/ide-golang

## VS Code

https://code.visualstudio.com/docs/languages/go

https://github.com/golang/vscode-go/wiki/features

## Installing

## Bootstrapping a project

{lang="bash}
    cd projectdir
    go mod init example/hello
    #edit hello.go
    go run .

## Building / executing

{lang="bash"}
    go run .

To build it

{lang="bash"}
    go build

## Error checks

{lang="bash}
    go vet

## Documentation

Use "godoc"

## Tests

### Unit tests

Unit tests are a "batteries included" feature in Golang.
The *testify* package extends that: https://github.com/stretchr/testify

Unit tests are run with

{lang="bash"}
    go test

They are in *name_test.go* files parallel to the code files. Test functions names should start with "Test" and take the parameter "t *testing.T".

To test recursively, and with coverage run

{lang="bash"}
    go test -coverprofile=coverage.out ./...
    go tool cover -html=coverage.out -o coverage.html
    firefox coverage.html

%% https://golangdocs.com/golang-unit-testing
%% https://medium.com/nerd-for-tech/writing-unit-tests-in-golang-part-1-introducing-testify-c0d458442412

Mocking can be simplified by using *Mockery* to generate default mocks.

{lang="bash"}
    go get github.com/vektra/mockery/v2/.../
    go run github.com/vektra/mockery/v2 --all

%% https://medium.com/nerd-for-tech/writing-unit-tests-in-golang-part-2-mocking-d4fa1701a3ae


%% https://medium.com/nerd-for-tech/writing-unit-tests-in-golang-part3-test-suite-6cca903be9ab

%% Todo Coverage: go test -v -cover

%% TODO IDE integration

%% Todo performance

### Integration tests

Integration tests support code coverage as well:

https://go.dev/testing/coverage/

https://go.dev/blog/integration-test-coverage


### Fuzzing

https://tip.golang.org/doc/fuzz/

## Libraries

Finding libraries https://pkg.go.dev

https://devdocs.io/go/

The tool

{lang="bash"}
    go mod tidy

will modify your *go.mod* file and add requirements

Using github as source and not

{lang="bash"}
    go get <github url>

will download a package

https://www.digitalocean.com/community/tutorials/importing-packages-in-go

## Cross compiling

{lang="bash"}
    GOOS=darwin GOARCH=386 go build test.go

To list available targets, call

{lang="bash"}
    go tool dist list

Available GOOS values are:

* darwin
* windows
* linux

Available GOARCH values are:

* i386
* arm
* amd64
* wasm

During execution, you can check the architecture using the runtime package

{lang="go"}
    import "runtime"
    import "fmt"

    // ...
    fmt.Printf("%s %s", runtime.GOOS, runtime.GOARCH)

For more complex compilations, there is a *golang* container on docker you can use to isolate cross compilation runs from the system.

Or GOX: https://github.com/mitchellh/gox

## Release management

https://goreleaser.com



see:

* https://golangcookbook.com/chapters/running/cross-compiling/
* https://dave.cheney.net/2015/03/03/cross-compilation-just-got-a-whole-lot-better-in-go-1-5
* support matrix: https://gist.github.com/lizkes/975ab2d1b5f9d5fdee5d3fa665bcfde6
* webassembly: https://www.sitepen.com/blog/compiling-go-to-webassembly

## Tutorials

https://www.tutorialspoint.com/go/index.htm

https://go.dev/

## Books

%% Black hat Go https://learning.oreilly.com/library/view/black-hat-go/9781098122645/
* https://golangcookbook.com/
%% https://learning.oreilly.com/library/view/learning-go/9781492077206/

%%%%%%%%%%

%% SAST: gosec  https://github.com/securego/gosec

%% https://www.elttam.com/blog/golang-codereview/

%% https://github.com/maruel/panicparse



%%  go install golang\.org/x/tools/cmd/godoc@latest godoc -http=:6060
%% documentation is now hosted locally

%% Go has an own vulnerability database: https://go.dev/blog/vuln
%% $ go install golang.org/x/vuln/cmd/govulncheck@latest
%% $ govulncheck ./...
%% https://security.googleblog.com/2023/04/supply-chain-security-for-go-part-1.html

%% Tool "deptree" shows dependency graph of "go mod"
%% Also relevant for dependencies: "go list" and "go mod graph"

%% Magic 3 build steps in go:
%% go mod init project
%% go mod tidy
%% go build a.go b.go c.go

%% Go uses garbage collection: https://tip.golang.org/doc/gc-guide


%% Green, power and go
%% Go profiler: https://go.dev/blog/pprof
%% Go benchmarks https://pkg.go.dev/testing#hdr-Benchmarks
%% effective go https://go.dev/doc/effective_go

%% Generics: https://go.dev/doc/tutorial/generics

%% Checkout if doing Microservices: Gin Framework, gRPC, Go Kit, Go Micro