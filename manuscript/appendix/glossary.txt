# Glossary {#chapter-glossary}

**StrongNaming**: Authentication for .NET libraries. Signed binaries with version verification and pinned key.

**0-day**: An exploit used by the attackers before the vulnerability is known to the defender. They are expensive on the black market. Typical malware does not need 0-days. As many users do not patch their systems.

**Adware**: Malware that shows Ads. As the Ad ecosystem generates money for viewed Ads this is how attackers convert infections to money

**Amplification attacks**: Are attacks where a 3rd party is used to attack the target with amplified bandwidth. Services emitting more data than they receive are vulnerable. Also quite often uses stateless protocols like UDP because the initiator is different from the victim.

**APT**: Advanced Persistent Threat. Advanced malware. Quite often by governments. Or just very advanced malware.

**ASLR**: Mitigation strategy to load code into **random** areas of the memory. Makes writing of exploits harder

**Backdoor**: A constructed way for an attacker to connect to a vulnerable system and execute code

**BLE**: Bluetooth Low Energy

**BLE Characteristic**: Value + Descriptor

**BLE GAP**: Advertisements, connection handling, defining device roles in communication

**BLE GATT**: Organizes the data offered by the device

**BLE L2CAP**: Encapsulating data into packets

**BLE Service**: Several Characteristics combined create a service. A default service for BTLE would contain device information

**BLE Profile**: Profiles combine several services. They standardize specific device classes

**Bot**: An infected machine that can be remote controlled by the attacker

**Botnet**: Infected machines centrally controlled by the attacker using a C&C

**Bug**: Error made in the programming phase. Not all bugs are vulnerabilities

**C&C**: Command and Control server. Central control over a botnet

**Class break**: A Class break is a vulnerability that breaks the whole device class. Instead of just one single device. Example: Same master key on all devices leaks

**CORS/ Cross-origin-resource-sharing**: Mechanism to define exceptions for the SOP (Same-origin-policy) in the HTTP header

%% TODO: **CSRF & Cross site request forgery**

**DEP**: Data execution prevention. Parts of the memory are marked as non-execute (=NX)

**DOS**: Denial Of Service - Attack that exhausts resources of the target (CPU, memory, network, storage)

**DDOS**: Distributes DOS - Attack is done by many systems in parallel

**Dynamite phishing**: Automated spear phishing. The malware silently collects mail communication to later fake new phishing mails for new victims

**ELF**: Linux executable file format

**Exploit**: Attack on a vulnerability

**Exploit Kit**: A ready to run malware spreading tool. Normally uses infected web pages to spread the exploit.

**Fast Flux**: Using Round-Robin DNS to hide a C&C server. One URL gets multiple IPs that way.

**Flaw**: Error made in the design phase. Not all flaws are vulnerabilities

**FP**: False Positive. A harmless URL or file is detected as malicious

**Dark Web**: Intentionally hidden parts of the web. Most common TOR pages

**Deep Packet Inspection**: A filter looks into the deeper layers of packets. Complex, and causes issues with encrypted data. Better don't do it.

**Deep Web**: Parts of the web, that is not indexed by search engines (intranets, everything behind a login, ....)

**Domain Flux**: Way to hide C&C servers. A domain name generator creates changing domain names

**DNG / Domain Name Generator**: Part of a malicious script generating possible URLs for C&C servers by time. By registering some of them the attacker can reduce take downs and still get connecting bots.

%% TODO: **EFF**:

**Evercookies**: Are snippets stored in the browser like cookies. Storage is JavaScript Local storage, Flash storage, ... hard to delete those data snippets. AKA Zombie Cookies

**Heap Spraying**: Loading the exploit code several times into several memory areas. Also uses *NOP slides*

**NOP slide**: Increases the target the instruction pointer has to hit to get to the exploit code. Done by adding NO operation codes to the beginning.

**RBN / Russian Business Network**: Rogue ISP offering bullet proof hosting (take downs by police not easy)

**Round-Robin DNS**: Old system for load balancing that does not work with modern clients or IPv6. TTL is short lived.

**IOC**: Indicator of Compromise. A file-hash, URL, registry key or similar feature left by the malware when a system is infected.

**Kill chain**: Phases of an attack

**Living off the land**: A tactics where the attacker uses pre-installed software for the attack. This reduces detectable malware on the system

**Malware**: Malicious software

**MISRA C**: Guidelines for safe C programming. Tools (compiler and static code analyser) support it. Some of the safety issues are also security issues. Check it out. Low hanging fruit.

**MITM**: Man/Monster in the Middle. Network connections are broken up in the middle by the attacker to spy or modify network packets

**RCE**: Remote Code Execution. An attacker is able to execute code without physical access to the system. Very bad.

**Reverse shell**: A command shell running on a hacked PC. To get out through NAT/Firewall it connects back from the infected PC to a server the attacker controls.

**Shellcode**: The payload in an exploit. Shellcode either pops a shell or establishes a connection to the attacker in the internet, ... This is where malicious things happen.

**Side Channel**: Using side effects to hack a system. For crypto a side channel can be timing differences between a right and a wrong password.

**Static Code analysis**: Analyse code without executing it. Compiler warnings are the best known example. Also linters.

**PE**: Portable Executable file. On Windows .exe and .dll (and some others). Starts wit a DOS Header (MZ)

**Phishing**: Attack using social engineering to get credentials. Can involve malware or exploits as well

**SOP / Same-origin-policy**: Web browser security principle: Elements of a web site must be from the same server

**Spear Phishing**: Targeted phishing. Learn about the target first to create better social engineering attack

**SQLI / SQL Injection**: SQL *commands* can be sent through the user interface to the database backend. Instead of just *values* (which was the developer's intention)

**SafeSEH**: A windows compiler feature to mitigate attacks abusing the Exception Handler. Attackers can modify the the exception table. The cause an exception. By that they then can control program flow. SafeSEH mitigates that.

**Threat intelligence**: A service offered by security companies (or peer-to-peer). Can start with sharing IOCs and end with detailed reporters on attacks and threat actors. Focus is on Advanced attacks

**TOR**: The Onion Router. Overlay network over the internet to ensure anonymity of clients and servers

%% TODO: **XSS / Cross Site Scripting**:

**Vulnerability**: A bug or a flaw that has security implications

**Waterhole attack**: Targeted phishing attack using a hacked/manufactured homepage the victim is known to visit and trust

**Weaponizing**: Making an exploit easy and reliable to use.

%% XSS, reflective

%% mixed content

%% nacl

%% forward secrecy

%% Perfect forward secrecy


%% TODO: Responsible/full disclosure


%% win32k - windows syscall containing lots of vulnerable GUI functionality - process can disable it's usage (research how) starting win8
%% NULL pointer de reference: in kernel process can access memory at NULL page (mitigation from win8+)

%% SMEP Supervisory Mode Execution Prevention
%% SMAP Supervisory Mode Access Prevention
%% both prevent memory access from high-priv processes to low-priv processes
%% Result: Exploited kernel can not access pointers and shellcode in user space processes
