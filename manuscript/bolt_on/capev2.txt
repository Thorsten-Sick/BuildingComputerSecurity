# CAPEv2 {#chapter-capev2}

[CAPEv2](https://github.com/kevoreilly/CAPEv2) is a malware analysis sandbox and a descendant of Cuckoo sandbox. Its focus is on dumping configuration files and unpacking malware.
For that it integrates a debugger which can be programmatically triggered on specified events.

It prefers the sandbox to be KVM based.

[Documentation](https://capev2.readthedocs.io/en/latest/#)

## Features

* API hooking
* Debugger
* Payload extraction
* Configuration dumping

## Installation

Before installing CAPEv2: You should run it on a dedicated PC. The installation script changes lots of settings and will kill your Desktop GUI.

Some brave people somehow got CAPEv2 installed on a desktop PC by cherry picking some lines from the installation script. If you want to go there: good luck.

The PC must also be able to spawn several VMs, investment in RAM is advised.

Use the [installation script](https://github.com/doomedraven/Tools/blob/master/Sandbox/cape2.sh)

Run it with *sudo ./cape2.sh base cape*

After that configure CAPEv2 and install the guest VMs

On target (aka guest)

* Get Windows trial version (see next chapter)
* Import OVA into Virtual Box
* Resize HD ! The 40 GB will be too small if you add Windows updates
* Firewall off
* Maybe check for Windows updates
* Windows Updates off
* Adjust the network settings: ping the host from the client (essential), maybe make sure the client can ping the internet.
* Install python. Some python versions do not work with Windows 7 ! But there is a Python 3.8
* Additional Apps installed
* Update for these Apps off
* Maybe install VirtualBox Guest application (convenient, but could be detected)
* Add Agent


### Windows ISOs

For evaluation and development Microsoft offers test VMs.

You can get a Windows ISO from:

* [Edge browser](https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/)
* [Windows 7](https://cuckoo.sh/win7ultimate.iso)

Or on vagrant 

* [Windows 10](https://app.vagrantup.com/StefanScherer/boxes/windows_10)

## Links

https://kalilinuxtutorials.com/cape-malware-configuration-payload-extraction/

[Author's blog](https://www.doomedraven.com/)

# Features (reporting/processing)

## Reporting modules:

* Mitre: Uses a MITRE DB file to add Mitre Att@ack data (TTP name, description, id) to a report
* binGraph: Binary file graph. Histogram, Entropy. [binGraph](https://github.com/geekscrapy/binGraph)
* ReportHTML: Long HTML report. Important for human review of results
* ReportHTML Summary: Short HTML report
* ReportPDF: Create PDF report
* MAEC5: A more condensed, graph like data [MAEC5](https://maecproject.github.io/releases/5.0/MAEC_Core_Specification.pdf)
* MongoDB (In Cuckoo): A SQL DB format
* ElasticsearchDB (In Cuckoo): A NoSQL data format
* Retention: This is the garbage collection
* Syslog: Logging. Maybe nice to have for larger setups
* ResubmitExe: Dropped exes are sent back to Cuckoo.
* Compression: Compressing the report. Nice to have s the report can be huge
* MISP (In Cuckoo): IOC sharing
* Callback: Notify if analysis is done. Nice for Dashboards or similar
* submitCAPE. Resubmit detected malware samples into CAPE with malware specific additional handling (debug, extract config)
* CompressResult: Compress data for MongoDB
* Ramfsclean: Garbage collection for memdumps

## Processing modules

* Curtain: [PowerShell de-obfuscation](https://github.com/karttoon/curtaincuckoo/)
* Sysmon: Process [Sysmon logs](https://docs.microsoft.com/en-us/sysinternals/downloads/sysmon)
* Analysis Info: General information
* Decompression: Decompresses artifacts compressed by CAPE for re-analysis
* Behaviour: Process behaviour log
* Debug: Process CAPE errors
* Detections: Config for different detection modules
* Dropped: Process dropped files and extract some info
* ProcDump: Add meta data to process dumps
* ProcMemory: Analyse process memory dumps (with YARA)
* Procmon: Process MS [Procmon data](https://docs.microsoft.com/en-us/sysinternals/downloads/procmon)
* Memory (Volatility): Volatility processing
* Usage: CPU/memory statistics
* Network: Processes PCAP
* Static: All kinds of static analysis: file magic, OLE tools, V8
* Strings: Extract printable strings
* Trid: File type detection by [Trid](https://mark0.net/soft-trid-e.html)
* Targetinfo: Base info: filename, url
* VirusTotal: Request info or submit files from VT
* Suricata: [Suricata network processing](https://suricata-ids.org/)
* Deduplication: Deduplicate screenshots
* VBA2Graph: Generate [VBA call graph](https://github.com/MalwareCantFly/Vba2Graph)
* JA3: [TLS fingerprinting a client](https://github.com/salesforce/ja3)
* MaliciousMacrobot: [Office document triage](https://github.com/egaus/MaliciousMacroBot)
* XLSDeobf: [XLM macro deobfuscator](https://github.com/DissectMalware/XLMMacroDeobfuscator)


%% CIF: ??? https://csirtgadgets.com/collective-intelligence-framework

%% boxjs: ???

%% Loop Detection: --


Missing in CAPE (but was in Cuckoo):

* APK info
* Baseline
* Buffer
* Doridmon
* DumpTLS
* Extracted
* Google play
* Irma
* MISP
* Screenshots
* Snort


### On GitHub

[CAPEv2](https://github.com/kevoreilly/CAPEv2)
[Monitor code](https://github.com/ctxis/capemon)
it is based on [Spender Sandbox](https://github.com/spender-sandbox/cuckoo-modified)
which is based on [Cuckoo Sandbox](https://github.com/cuckoosandbox/cuckoo)

%% Features to verify: Process injection (OS, bit), Process dumper = unpacker, config extractor, Debugger,  Python3, volatility, which VMs supported ?, simulated networks ?, fog server support, dist.py, supported windows versions, are tags for vms supported

%% TODO: CAPEv2 + FOG server: https://mariohenkel.medium.com/using-cape-sandbox-and-fog-to-analyze-malware-on-physical-machines-4dda328d4e2c

%% TODO: Network cloning and management. For bare metal analysis machines: https://fogproject.org/

%% https://www.inetsim.org/downloads.html

