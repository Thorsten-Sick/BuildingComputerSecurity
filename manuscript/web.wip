# Web security

%% TODO: Add hackium https://github.com/jsoverson/hackium

.. State: 10 % Web

%% https://nullsweep.com/http-security-headers-a-complete-guide/

## Web architecture

https://engineering.videoblocks.com/web-architecture-101-a3224e126947

## SRI

*Subresource Identifier (SRI)* is an optional attribute for tags with links to exernal resources. As static data (especially JS frameworks like JQuery) are stored on CDNs it is hard for a web page developer to trust that the referenced framework is the expected one. Using the SRI attribute (which is a hash) you can ensure that the loaded 3rd party content has not been messed with.

The SRI value is the name of a hash function plus the base64 encoded hash value.

Learn more [SRI details](https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity)

%% TODO: test it
%% Oneliner: curl -s [url]|sha256sum|xxd -r -p|base64

## CORS

## Attack vector web cache

https://portswigger.net/blog/practical-web-cache-poisoning

## CSP

Cross site scripting protection. A security header is set in the http reply restricting external resources allowed to be loaded.

%% https://uselesscsp.com/

%% https://www.cspisawesome.com/

https://addons.mozilla.org/en-US/firefox/addon/laboratory-by-mozilla/

## X-Content-Type header

Defines the MIME type of the returned content. Prevents Cross Site Scripting.

## Corb

## IFrame isolation

*X-Frame-Options* header: Can a site use this page in a frame ? Prevents Click jacking attacks.

## Cookie permissions

A HTTP header (Set-Cookie) can restrict cookie permissions:

* Secure; Transfer https only
* HttpOnly; No access from JAvaScript

## X-XSS-Protection

*X-XSS-Protection: 1; mode=block*

%% TODO: What exactly is it doing ? "Browser halts execution on XSS detection"

## Standard attacks on browsers

.. TODO: Write about it



## Standard attacks on web sites

%% TODO: Write about it

## Burp

%% TODO: Write about it

## Th3inspector

https://github.com/Moham3dRiahi/Th3inspector

%% TODO: Check it out

## Snallygaster

Scanning web sites for secret files

https://blog.hboeck.de/archives/892-Introducing-Snallygaster-a-Tool-to-Scan-for-Secrets-on-Web-Servers.html

* git
* dump.sql
* xaa
* private keys
* coredumps

%% Hanno: "Noticed some PHP behavior recently and had an idea: PHP will throw a warning if you try to use sessions and the session cookie has special chars in it. What does that mean? If the site is configured with display_errors=On and uses sessions you can force it to throw PHP warnings and show paths. Try something like "curl -s --cookie PHPSESSID=äöü [host]" and grep for "Warning"."

## CTFR


Use CT logs to get web site sub domains

https://github.com/UnaPibaGeek/ctfr

## Od1N


Automated attacks on web packages

https://github.com/CoolerVoid/0d1n

.. TODO: Test

## Malvertising

https://www.heise.de/security/meldung/Malvertising-Kriminelle-nutzen-Tausende-WordPress-Sites-als-Malware-Schleudern-4125985.html


## Best practice: Buy similar URLs

Buy similar urls. Also maintain your hold on the domains you own. Maybe even
past the time you use them - if you are running your mails over your domain
your customers may continue to use that - and by accident communicate with the
attacker who bought the domain after you quit.

* Typo squatting
* Certificates

## Best practice: Anti Pony/Fareit

There is a famoud malware module used by many malware samples: Pony.
Once a computer is infected it harvests the store of browsers and FTP clients for passwords.
This is done to get access to new sites to infect.

Long story short: Keep your development environment malware free and do not store you passwords in our FTP clients.

## XSRF

Cross Site request forgery uses uses a second web page to trigger events on the attacked web page. For that it is using links to teh attacked web page with parameters that trigger server side actions.

For actions triggered by GET requests simple links with GET parameters can be used.

For actions triggered by POST requests, the attacking page can use invisible forms with POST and a JS script sending the POST request by submit.

%% TODO Add examples

### XSRF Token

To protect against XSRF a token can be used. This is unique for each session and is sent with every request that changes any state on the server. The attacker can not know the token the victim has.


## Command injection

If the functionality of a web application is based on linux command line tools and the user can submit a parameter that will later by the backend be fed into a linux tool, use ";" to call a new command right after the the first one.

## PHP uploads

If a web application allows file uploads (images, ...) and you can send php files instead that will be interpreted by the backend you got an attack.

Craft a php file, upload it and check what happens.

PHP commands to use:

* phpinfo();
* passthru("commandline command");



%%%%%%%%%%%%%%%

%% TODO: Subdomain enumeration: https://github.com/cakinney/domained
%% http://michenriksen.com/blog/aquatone-tool-for-domain-flyovers/
%% https://github.com/michenriksen/aquatone/
%% https://github.com/appsecco/the-art-of-subdomain-enumeration

%% ReDoS attacks: https://www.bleepingcomputer.com/news/security/javascript-web-apps-and-servers-vulnerable-to-redos-attacks/

%% Site security analysis: https://scotthelme.co.uk/sites-that-used-to-have-ev/

%% EKFiddler: Fiddler Web debugger: https://www.kitploit.com/2018/08/ekfiddle-framework-based-on-fiddler-web.html
%% And: https://github.com/malwareinfosec/EKFiddle

%% https://github.com/jseidl/GoldenEye

%% https://linux-audit.com/web-changes-with-http2-performance-and-security/


%% Why https: https://www.troyhunt.com/heres-why-your-static-website-needs-https/

%% TODO: File upload: https://github.com/almandin/fuxploider

%% Top 10 Web hacking 2017: https://portswigger.net/blog/top-10-web-hacking-techniques-of-2017

%% Web market shares 2018: https://sparktoro.com/blog/2018-search-market-share-myths-vs-realities-of-google-bing-amazon-facebook-duckduckgo-more/

%% https://portswigger.net/blog/bypassing-web-cache-poisoning-countermeasures

%% TODO: Server side Request Forgery:
%% https://medium.com/@madrobot/ssrf-server-side-request-forgery-types-and-ways-to-exploit-it-part-1-29d034c27978
%% https://medium.com/@madrobot/ssrf-server-side-request-forgery-types-and-ways-to-exploit-it-part-2-a085ec4332c0
%% https://medium.com/@madrobot/ssrf-server-side-request-forgery-types-and-ways-to-exploit-it-part-3-b0f5997e3739


%% TODO: Strict CSP: https://security.googleblog.com/2016/09/reshaping-web-defenses-with-strict.html

%% TODO: XSRFProbe https://www.kitploit.com/2019/01/xsrfprobe-prime-cross-site-request.html?utm_source=dlvr.it&utm_medium=twitter

%% TODO: Data correlation https://github.com/woj-ciech/Danger-zone

%% TODO: Mozilla Observatory https://observatory.mozilla.org/

%% TODO: Domain enumerator Findomain: https://github.com/Edu4rdSHL/findomain


%% TODO: Greasemonkey Firefox extension to manipulate web pages


%% TODO vulnerability scanner Nuclei https://github.com/projectdiscovery/nuclei