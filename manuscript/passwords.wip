

## Rainbow tables

To crack hashes (and passwords are stores as hashes) attackers use **Rainbow Tables**.
These are large databases with pre-compiled string->hash pairs. Some more
optimization is available.

Relevant for the defender:
The attacker just reduced required CPU power and swapped it for hd space requirements.
Common passwords will be in this table and are easy to crack.
Non-common passwords or *salted* passwords are better protected.

%% TODO: More details on rainbow tables. https://en.wikipedia.org/wiki/Rainbow_table

## Salting

A **salt** is a random string/number.

This is added to the password, before it is hashed. The salt is stored together
with the username and password-hash in the database.

By adding a random string/number to the password the user entered before it
is hashed, we force the attacker to create rainbow tables for each of these salts.

Create a new random salt for every user. That way even if two users use the
same standard password, the resulting hashes will be different.

Make the salt big.

## Pepper

Similar to salt. But pepper is either stored in another database/config file -
so password database and config file will have to be hacked.

Or even not stored at all but be quite small.

When comparing the hash the computer will have to generate lots of hashes
with *password + all possible peppers.*


### Storing password hashes

%% .. TODO: Verify and dig deeper

Generic hashes:

Broken: MD5, SHA-1
Good: SHA256, SHA512

Special Password hashes:

https://en.wikipedia.org/wiki/Hash_function_security_summary

While other hash functions are efficient, for password hashes we want
inefficient hash functions. On a normal server it does not matter that much.
But thet attacker gets into lots of trouble thanks to the in-efficient hash.

* Argon2 (https://www.argon2.com/)
    * Argon2d: GPU attack resistance
    * Argon2i: side channel attack resistance
* bcrypt: Vulnerable to FPGA, ASIC attacks
* scrypt: Vulnerable to GPU attacks
* PBKDF2: Vulnerable to FPGS, ASIC and GPU attacks

%% TODO: https://de.wikipedia.org/wiki/Bcrypt  Details

%% TODO: https://de.wikipedia.org/wiki/PBKDF2 Details


%% https://en.wikipedia.org/wiki/Hash_function_security_summary

Those are built to slow hashing down. Forcing attackers to waste money.



%% .. TODO: Google or Facebook logins




## 2FA

%% .. TODO: 2FA

Multi factor auth for IoT: https://hologram.io/announcing-multi-factor-authentication-for-iot-and-global-dash-cellular-board/

%% .. TODO: Check if good

## Upgrading passwords

%% .. TODO: research and write.

https://www.michalspacek.com/upgrading-existing-password-hashes


## Alternatives

A paper on alternatives to password

http://www.jbonneau.com/doc/BHOS12-IEEESP-quest_to_replace_passwords.pdf

## Password cracking

https://www.unix-ninja.com/p/A_cheat-sheet_for_password_crackers

%% .. TODO: Read

## Cracking ZIP

Cracking zip: frackzip
