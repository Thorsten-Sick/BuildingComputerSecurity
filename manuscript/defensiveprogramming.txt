# Defensive programming {#chapter-defensive-programming}

C> By: Thorsten Sick

C> For: Developers

%% TODO: [CII best practice](https://linux-audit.com/secure-software-development-cii-best-practices/)

## Short abstract

Defensive programming is coding while expecting your program to be actively attacked.
It needs some getting used to, but in the end debugging defensive code is much
simpler than debugging normal code. This positive side effect is caused by
stricter error handling.
Errors will cause instant program termination and stack traces (thanks to
[asserts](#chapter-asserts) and better error handling in unlikely error conditions).

## TODO

* Focus on vulnerable code first
* Reduce complexity
* Use [asserts](#chapter-asserts)
* Memory writing mess
* Use external libraries
* malloc/free best practice
* Input validation
* Encrypt all the data sent over network
* Exceptions vs. return values

## Typical attacks on programs

* Attackers can overflow stack or heap memory space. This could be abused to insert malicious code into your program flow
* Attackers can just cause loops in your program causing a DOS situation
* Attackers can send network data to your program which responds to a third party service with even more data (aka amplification attack)
* Attackers can cause programs to dump critical data like passwords or crypto-graphical credentials

These are typical attacks. Operating system, system environment and programming
language used will define the exact way the attacks will try to accomplish their goal.

So the choice of the defense technology will also depend on those factors. The
basic principles will stay the same.


## Details todo list

### Focus on vulnerable code first

You want to especially harden parts in code that use external resources
(memory, files, ...) and process external data (user input, files content,
network packages ). Also keep an eye on external code being used (from 3rd party
libs, from the other team's code, ...)

You should expect every input to be at least *accidentally* wrong. In a malware
attack situation you can even expect the input to be handcrafted to cause as
much damage as possible (*remote code execution* would be one possible goal of an attacker).

### Reduce complexity

Complexity is cfreated by bad design or bad code. And complexity causes all kinds of trouble:

* vulnerabilities
* Expensive maintenance
* Development slows down after a certain program size
* It even make certain sizes of projects impossible to achieve

Ways to manage complexity is *object oriented* design and code. This breaks
big tasks down into discrete objects.
So object orientation is a tool to achieve *software components*. If you can
achieve splitting the project into components by other ways: Great.

They must:

* Be simple. One task only
* Reduce inter-connections between components
* Have one entry, one exit
* Be well documented
* Have reduced parameters
* Not have side effects like "...and also writes into a file and sets a registry key..."
* Reduce global variables
* Reduce parameters to functions !

Best practice is to create a collection of modules and components to be used
without modification in several projects.

That way you will get a good ROI and proof that the components are generic and well designed.

Other ways to reduce complexity:

* Do not use all the possible fancy language features available. Especially those making the code harder to read
* Reduce dependencies on libraries (especially on Javascript)
* Refactor for simplicity
* Simplify used data and file formats
* Remove old features

%% TODO: Check value range of variables

%% TODO: check variables for plausibility

%% TODO functions must check parameters for type, dimension and value range (maybe by assert)

%% TODO: Use read-only parameters (const keyword in C)

%% TODO: All parameters sent to functions should be read-only (not always possible, but at least reduce the rw parameters and document them)

%% TODO: Expect errors. Handle them properly (Error tolerance)

%% TODO: Expect intermediate values to be faulty (check in code or by assertion). Especially after calling 3rd party functions

%% TODO: Self check (permanent, or after updates)

%% TODO: Select the proper language ! in Coding Standards

%% TODO: Select feature set of language to be used. Reduce ! Complexity kills (in Coding Standards)

%% TODO: Write how to: Potential errors and how to handle them in Coding Standards

%% TODO: How-to: Avoid errors in Coding Standards

%% TODO: Is portability needed ? To which kind of systems ?

%% TODO: Is simulation needed for better test coverage ?

%% TODO: MISRA standard and CppCheck activation ?

%% TODO: CppCheck function database ?

%% TODO: initialize variables on declaration (set to 0 or NULL)

%% TODO: Maybe use Yoda conditions: https://en.wikipedia.org/wiki/Yoda_conditions




### Memory writing mess

memcpy/strcpy/gets/...

Do not copy more bytes than the buffer can contain. Strings in C have a
terminating 0 byte, take this into consideration...

Search in your code for **strcpy**, **sprintf**, ... those functions are to be replaced
with **strncpy** and **strnprintf** right now. Those variants respect the target
buffer size. Benefits: You will kill a certain class of bugs that are very
hard to debug because they only happen on a certain input.

Even better than **strncpy** is **strlcpy** and **strlcat** (which guarantees null termination as well
as proper size handling). If available, use that.

### Use external libraries

If you (or your company) solves the same problem in lots of projects, either
use existing libraries or create your own ones. The behaviour of them should be
verified and stress tested. That is a very efficient way of getting a
problem solved with good code quality .

If you are using external libraries:

* Monitor the developers - red alert if they stop shipping new versions
* Spend some time and money to test those libraries (fuzzing)
* Get in touch with the developers and push some patches / issues to establish a channel
    * Monitor their responsiveness
    * Contribute if it Open Source. That way you can do the emergency fix
* Wrap the external libraries in you own code.
* Be ready to update a library in all your projects as soon as a bug is found

If you create your own libraries, maybe release them as open source. To get more
users to "test" your libraries.

This or establish this library in your company to get more valuable feedback.

Benefits of wrappers:
A wrapper also reduces complexity your application developer will have to face.
Only offer the required core functionality to them. All the fancy bonus
feature the library will have to handle special cases will be hidden from the
application programmers.

You can also work around broken stuff in the library
without the developers noticing.
The more extreme variant of this is to streamline the behaviour of different versions of
the wrapped library. Just in case upstream did brake/improved the interface while also
shipping essential security fixes.

If the library has a bug that is not fixed you can filter the data to the lib on your side as a workaround.

And last - not least:

As an exit strategy you could even replace the external library and use a
similar one - and your abstraction layer hides that from the application code.

%% TODO: Expect modifications in the future. Put all knives into the drawer...


%% TODO: Merge with documentation above (we have this one twice)

### malloc/free best practice

It is hard not to leak memory in C. There are some fancy tricks to get it
right anyway.

* Define who will free allocated memory (caller or called). If you have a library, support init/deinit
* After free, set pointer to null
* after alloc, check if memory is there. Attackers can possibly deplete available memory.
* depending on your situation: memset memory directly after allocation
* make sure, memsetted structure to 0 is marked as "not initialised" and is not halfway valid and cause errors down the road when used premature
* goto: have a section in your function to free up allocated memory
    * Call this when errors happen internally
    * For this short jump I will allow gotos. This is the only exception
    * Always call the label you jump to the same. I like "cleanupthemess"
* If the memory contained valuable data (keys, passwords), memset it before freeing it. Freed memory is available but still contains the old data !
    * Read section ["memsad rabbit hole"](#memsad)

### Input validation

Do not start to blacklist characters or combinations of characters. Instead:
Create a whitelist of characters and an exact pattern of data you allow.

Validate your input against that and only process positive input.

### Encrypt all the data sent over network

No matter which network (Bluetooth, WiFi, Internet, Mobile): expect it to be
hacked and broken. Plan accordingly. Encrypt.

Do not use your own crypto. Fall back to standards like TLS.

%% TODO: Find some crypto lib for TLS connection

%% TODO: Find Public key crypto for embedded

### Exceptions vs. return values

Always handle error return values. You never know what a called
function/library did internally and when. If you are not checking for errors the
system can be in an *interesting* state when your code continues. This will
cause hard to track errors.

If possible: use exceptions (because someone else could forget to handle
return values). Unhandled exceptions will trickle down and be at least handled
by the default exception handler.


## Basic pattern for C coding

There are many tricks to write secure C code. I tried to collect the most
basic ones in a sample C program.

You will also see the only valid reason to use a *goto* in a C program.

{title="Basic pattern for handling standard C errors", lang=C}

    #include <assert.h>
    #include <stdlib.h>
    #include <string.h>
    #include <stdio.h>

    // This is best in a project central header file
    #define OK 0
    #define ERR_MEM -1  // Memory error
    #define ERR_EXAMPLE -2  // An example error
    // End header file


    #define BUFFLENGTH 100

    int bar(int a)
    {
        int ret = OK;
        if (a < 0)
        {   // Always add parantheses, google "goto fail"
            ret = ERR_EXAMPLE;
        }

        return ret;
    }

    int foo(int a)
    {
        void * buff = NULL;
        int ret = OK;

        assert(a > -10);
        assert(a < 100);

        buff = malloc(BUFFLENGTH);
        if (buff == NULL)
        {
            ret = ERR_MEM;
            goto cleanupthemess;
        }
        memset(buff, 0, BUFFLENGTH);

        // use the memory

        ret = bar(a);
        if (ret != OK)
        {
            printf("error now\n");
            goto cleanupthemess;
        }

        printf("Never reached thanks to parameter in main\n");

    cleanupthemess:

        if (buff)
        {
            memset(buff, 0, BUFFLENGTH); // For sensitive content like passwords. MUST READ Secition "Memsad" !
            free(buff);
            buff = NULL;  // Prevents double frees
        }
        return ret;

    }


    int main()
    {
        exit(foo(-1));  // 0 indicates ok, everything else is an error
    }


[Goto fail](https://nakedsecurity.sophos.com/2014/02/24/anatomy-of-a-goto-fail-apples-ssl-bug-explained-plus-an-unofficial-patch/)

Tricks used:

* asserts protect agains things that "can never happen"
* variables are intialized when declared
* success of allocating memory is checked
* Return values are centrally declared and used through the project
    * Like written in the code: They would belong into a central header file
* OK is 0, error values are < 0. You can use anything > 0 as normal return values !
* *goto cleanupthemess* is used to jump to a central cleanup handler
    * This frees everything allocated
    * Without an error it would also run
    * There is only one *return* in the function. Returning the error
* memory is initialized to 0
* before calling free, we check if memory pointer is already NULL
* memory is set to 0 before freeing
    * freeing just "disconnects" the pointer
    * memory is still there - and it's content
    * without memset: next time someone requests memory, it can be pre-initialized with the old content
        * and this could be credentials and passwords
    * After calling *free* the pointer is set to NULL to prevent double-free issues

Improvements:

* This program lacks Doxygen comments. I left them out to keep it simple.
    * When writing this program for real you will want them !

%% ## Similar chapters

%% TODO: Create focus chapters for different programming languages.

## Memsad rabbit hole{#memsad}

Compiler optimisations can remove the call you used to clean the passwords
from stored memory (where you memset the memory with "0").

There is a very cool [talk at 35C3 called "Memsad"](https://media.ccc.de/v/35c3-9788-memsad)
covering this topic. You should **now watch** this talk. The rest of this
section in the book will be just references for looking it up later.

To experiment with compiler optimisation this talk points to the cool
[Compiler Explorer](https://godbolt.org/) page.

* explicit_bzero (glibc)
* SecureZeroMemory(Windows)
* memset_s (C11, optional)
* Check your crypto library
    * OPENSSL_cleanse
    * gnutls_memset
    * sodium_memzero

Compiler: *-fno-builtin-memset* (GCC, newer version of CLANG)

The talk has lots of other options, but there are more specific and will only
work in specific situations. Watch it.

## Further reading

### CERT coding standards for C and C++

The best checklist I found so far is this:

[CERT coding standards for C and C++](https://wiki.sei.cmu.edu/confluence/display/seccode/SEI+CERT+Coding+Standards)

### Wikipedia

[Wikipedia on Defensive programming](https://en.wikipedia.org/wiki/Defensive_programming)


### Secure programming Cookbook

The [Secure Programming Cookbook](https://www.safaribooksonline.com/library/view/secure-programming-cookbook/0596003943/)
has lots of receipts for common secure programming problems. It is more focussed ont the Operating System level (Windows, Linux).

### Building secure software

While the book [Building Secure Software](https://www.safaribooksonline.com/library/view/building-secure-software/9780672334092/) is
more focussed on typical C issues. It is thinner, a bit older but a very good start. Put this one on your desk. And read it.

### Writing unmaintainable code

[How to Write Unmaintainable Code](https://www.se.rit.edu/~tabeec/RIT_441/Resources_files/How%20To%20Write%20Unmaintainable%20Code.pdf)
is a funny document describing the hell of bad code - and how to create it. If you just let it circulate amongst your peers it could be more powerful than Coding Guidelines.

### Secure coding in C and C++

The big gun is [Secure coding in C and C++](https://www.safaribooksonline.com/library/view/secure-coding-in/9780132981989/). Draw this one last, if the other books are read.
Or if you have sufficient time.
