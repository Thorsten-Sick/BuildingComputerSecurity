# Mitmproxy

[mitmproxy](https://mitmproxy.org/)

## Local usage

Start mitmproxy from the command line. You do **not** have to be root.

* You can get the key-bindings by pressing "?".
* CTRL+C will exit mitmproxy


Set the proxy of the browser to the local host (where mitmproxy is running).

{lang="bash"}
    chromium --proxy-server="localhost:8080"

Or use the user interface of the browser to set the proxy.

The mitmproxy will now display the http connections without blocking
or modifying them.

There is a command line interface that can be started by entering ":".
It has a tab-completion.
For example ":console.view.eventlog" shows the mitmproxy event log

A list of commands can be shown by pressing *C*.

%% TODO: Check if local proxy settings only cover the web browser content or the updater as well

## Usage with a forwarding PC (transparent proxy)

To filter the full communication route it through a PC and run the mitmproxy there.

%% TODO: Write https://docs.mitmproxy.org/stable/concepts-howmitmproxyworks/


%% TODO: Get this script to work
{lang="bash"}
    # Victim is on eth0
    # internet on eth1

    nmcli networking off

    sysctl -w net.ipv6.conf.all.forwarding=1
    sysctl -w net.ipv4.conf.all.forwarding=1
    sysctl -w net.ipv4.ip_forward=1

    ip link add name br0 type bridge
    ip link set br0 up
    ip link set eth0 master br0   # Add eth0 to bridge
    ip link set eth1 master br0   # Add eth1 to bridge
    ip link set eth0 up
    ip link set eth1 up
    dhclient br0  # to get network settings back

    bridge link # Show existing bridges

    # Now set up redirection to mitmproxy
    iptables -t nat -A PREROUTING -i br0 -p tcp -m tcp --dport 80 -j REDIRECT --to-port 8080
    iptables -t nat -A PREROUTING -i br0 -p tcp -m tcp --dport 443 -j REDIRECT --to-port 8080

    ip6tables -t nat -A PREROUTING -i br0 -p tcp -m tcp --dport 80 -j REDIRECT --to-port 8080
    ip6tables -t nat -A PREROUTING -i br0 -p tcp -m tcp --dport 443 -j REDIRECT --to-port 8080

    mitmproxy --mode transparent --showhost -s examples/complex/sslstrip.py

* mitmproxy is using sslstrip here. It is optional but many connections are ssl encrypted.

This script is not perfect. For example I had to connect the victim PC first
directly to the router to get DHCP setup and loop the monitoring device in later.

Just to give you some workarounds.

## Certificates

One way of solving the certificate issue is to sslstrip the encryption away.
To do this use the sslstrip.py script:

{lang="bash"}
    mitmproxy -s examples/complex/sslstrip.py

Keep in mind: Some sites are hardcoded *hsts* in the browsers. This is
especially true for google sites.

You can get some improvement by sabotaging the security of the browser with
switches like these:

{lang="bash"}
    chromium --proxy-server="localhost:8080" --ignore-certificate-errors --allow-running-insecure-content

%% TODO Link to the browser chapter for more switches

Some applications use their own certificate store, some the OS store.

The special domain contains the mitmproxy certificate: mitm.it

For some OS-es it will guide you through the way to install it.

For Ubuntu you will have to install it OS-wide:

{lang="bash"}
    cd ~/.mitmproxy
    openssl x509 -in mitmproxy-ca.pem -inform PEM -out mitmproxy-ca.crt
    sudo mkdir /usr/share/ca-certificates/mitm
    sudo cp mitmproxy-ca.crt /usr/share/ca-certificates/mitm
    sudo dpkg-reconfigure ca-certificates

It will still depend on the application if to use an own certificate or
trust the OS store. Especially for browsers that can differ.

## Intercepting

Press *i* to enter an interception filter. This can be a url-component.
Wildcards are also accepted.

Intercepted flows can be edited by pressing the *e* key in the detail view.
You can then select which item to edit. The *Tab* key lets you switch.

*a* will accept the selected flow - which makes it continue.
*A* will accept all intercepted flows

## Scripting

{lang="bash"}
    mitmproxy --mode regular -s scriptname.py

* --mode sets the operation mode. The most intersting ones are *regular*, *transparent* and *socks5*
* -s executes this script


%% TODO: Check bdfproxy binary backdooring feature

## Further reading

[Learning Python Web Penetration Testing](https://learning.oreilly.com/library/view/learning-python-web/9781789533972/)

Has a bigger chapter covering mitmproxy. Including coding of plugins.

[mitmproxy documentation](https://docs.mitmproxy.org/stable/)
