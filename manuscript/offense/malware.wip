# Malware

Do not write malware. Especially not autonomous ones.

There are several reasons. I have seen lots of "good intended" lab malware escaping. With a hell of collateral damage and shattered existences.

Do not patch malware. Yes, by adding some bytes to an existing malware file you can break stupid hash-based detection. But you do not know the
malware and its attack features. Could go horribly wrong. And you kind of proofed nothing.

But there is a case for writing **malware simulators**

## Malware simulators

A good example for a malware simulator is [PaFish](https://github.com/a0rtega/pafish). It is a demonstration tool for sandbox detection.

The reasons why it is good:

* It has a single purpose
* It only uses techniques already seen in malware (= relevant. And no nasty side effects like handing out new guns to the bad guys)
* Code parts are separated (no side effects which results in reliable software - good for testing other components like sandboxes)

We need a lot more tools like those.

%% TODO: Write
%% https://0x00sec.org/t/malware-writing-python-malware-part-1/11700
%% https://0x00sec.org/t/malware-writing-python-malware-part-2-keylogging-with-ctypes-and-setwindowshookexa/11858
%% https://0x00sec.org/t/malware-writing-python-malware-part-3-stealing-credentials-and-cookies/12099

%% TODO Malpedia https://malpedia.caad.fkie.fraunhofer.de/

## First: Test your connections

First you test if your detection technology is connected properly to all incoming data channels. For that you can be quite creative.

* Mail the eicar test file
* Zip it first
* Download it using a browser
* ...

Do the same with the test urls (see browser chapter)




%%%%%%%%%%%%%%%%%
## Malware sources

If you are running a lab or university experiment you need malware to test. There are some sources for samples. Be aware: they are old, unreliable and still dangerous for your system.

%% TODO: https://github.com/mstfknn/malware-sample-library
%% TODO: https://github.com/mstfknn/android-malware-sample-library


%% TODO Add Sophos as source: https://ai.sophos.com/2020/12/14/sophos-reversinglabs-sorel-20-million-sample-malware-dataset/
%% and https://securityaffairs.co/wordpress/112302/malware/sorel-20m-free-malware-dataset.html
%% aka SOREL-20M

%% Mlget: Tool to download malware https://blog.xorhex.com/blog/mlget-for-all-your-malware-download-needs/ and https://github.com/xorhex/mlget

### Blog posts

* [Fantastic malware and where to find them, a blog post with several sources](https://www.megabeets.net/fantastic-malware-and-where-to-find-them/)
* [A malware blog post](https://contagiodump.blogspot.com/)
%% * [Malwarebytes](https://forums.malwarebytes.com/forum/44-research-center/)

### Malware downloads

* [Malware Bazaar, Abuse.ch](https://bazaar.abuse.ch/)  %% Has API !
    * [Example python API](https://github.com/cocaman/malware-bazaar)
    * [Direct download](https://mb-api.abuse.ch/downloads/)
* [Virustotal, needs account](https://www.virustotal.com)
* [The Zoo, A github project hosting malware](https://github.com/ytisf/theZoo)
* [Das Malwerk](https://dasmalwerk.eu/)    %% pwd "Infected"
* [Malshare](https://malshare.com/) %% Needs free (?) account, has python API
* [Virus Bay](https://beta.virusbay.io/)  %% Needs account
* [VirusShare](https://virusshare.com/) %% Needs account
%% * [](http://sarvam.ece.ucsb.edu/recent)
* [TL Bots](https://github.com/threatland/TL-BOTS)
%% * [Virus share](https://a4lg.com/downloads/vxshare/)
* [Malicious park. Files from honeypots. Older](https://github.com/REal0day/MaliciousPark)

%% TODO: VXShare https://chapinb.com/libvxshare/

### Online analysis

* [Crowd strike falcon analysis page](https://www.hybrid-analysis.com/file-collections)
%% https://virusscan.jotti.org

### Malware crawlers

[Ph0neutria, not maintained](https://github.com/phage-nz/ph0neutria)


%% http://iec56w4ibovnb4wc.onion/

%% https://vxug.fakedoma.in/samples.html
%% Needs verification

%% ### Pentesting scripts
%% TODO: https://github.com/wintrmvte/Citadel



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%## Cleanstuff sources

%% Find old variantes of windows files: https://m417z.com/winbindex/
%% http://www.oldversion.com.de/
%% https://www.oldapps.com/
%% NSRL https://www.nist.gov/itl/ssd/software-quality-group/national-software-reference-library-nsrl



%% ## Malware analysis
%% https://blog.christophetd.fr/malware-analysis-lab-with-virtualbox-inetsim-and-burp/
%% C2: https://github.com/felixweyne/imaginaryC2#demo-use-case-simulating-trickbot-servers
%% https://blog.malwarebytes.com/threat-analysis/2018/02/encryption-101-malware-analysts-primer/
%% https://blog.malwarebytes.com/threat-analysis/2018/03/encryption-101-how-to-break-encryption/

%% Hidden bee miner with Drive-by-download exploit: https://blog.malwarebytes.com/threat-analysis/2018/07/hidden-bee-miner-delivered-via-improved-drive-by-download-toolkit/

%% Detection: https://twitter.com/pmelson/status/967483922480320514?ref_src=twcamp%5Eshare%7Ctwsrc%5Eandroid%7Ctwgr%5Edefault%7Ctwcon%5E7090%7Ctwterm%5E2
%% """
%% If you write network or host detection logic as part of your job, I want you to think about your adversary’s costs in time and money. Detecting metadata, URL path names, User-Agent strings - fine, but all disposable. Instead, detect the encoded field that contains the beacon.
%% Every time you force your adversary to refactor communications - especially if it requires code changes on their server side - you slow them down and burn them out. If their motivation is financial/opportunistic, they will move on to softer targets.
%% The same is true for host detection of mission payloads. Write detection for the persistence mechanisms they use or the set of functions they import, especially if they use third party libraries for encryption or communication, because that burns another set of code on their end.
%% Your objective is to force them into heavy obfuscation (which can also be detected) or to change tools and tactics in order to re-establish a foothold in your environment. Only mission-based actors will persist past this a second or third time, because it’s literally their job.
%% Long story short, there is asymmetry in defense. Analysis and detection is cheaper than development and testing. Your job is to use that asymmetry to your advantage.
%% @pmelson
%% """

%% ## Living off the land

%% TODO: File less Malware https://www.peerlyst.com/posts/understanding-fileless-malware-infections-the-full-guide-andra-zaharia?trk=search_page_search_result

%% A list of LOLBin (Living off the land binaries) and LOLScripts (Living off the land scripts) can be found in the [LOLBAS database](https://lolbas-project.github.io/#)

%% For Linux there is the [GTFOBins](https://gtfobins.github.io/)

%% TODO: Search lolbas on a system: https://github.com/mzfr/gtfo
%% https://github.com/LOLBAS-Project/LOLBAS/blob/master/yml/OSBinaries/Rundll32.yml

%% TODO: https://oddvar.moe

%% ## Malware databases

%% https://github.com/viper-framework/viper





%% NotPetya: https://boingboing.net/2018/08/22/andy-greenberg.html
%% https://www.wired.com/story/notpetya-cyberattack-ukraine-russia-code-crashed-the-world/
%% https://www.wired.com/story/notpetya-cyberattack-ukraine-russia-code-crashed-the-world/?eminfo=%7b%22EMAIL%22%3a%22vMXQ8FVNjnx0q6IHKGCrs8bo%2fdzItv7b%22%2c%22BRAND%22%3a%22FO%22%2c%22CONTENT%22%3a%22Newsletter%22%2c%22UID%22%3a%22FO_DTA_8E80F659-8098-47BE-B030-5C59FC9429A1%22%2c%22SUBID%22%3a%2284709699%22%2c%22JOBID%22%3a%22862365%22%2c%22NEWSLETTER%22%3a%22DATA_SHEET%22%2c%22ZIP%22%3a%2294402%22%2c%22COUNTRY%22%3a%22USA%22%7d


%% Malware must die: https://linux-audit.com/interview-malwaremustdie-linux-malware-research/

%% Exploit Kits 2018: https://blog.malwarebytes.com/threat-analysis/2018/08/exploit-kits-summer-2018-review/


%% XMRig Coinminer: https://www.malware-traffic-analysis.net/2018/08/06/index.html


%% Wannacry: https://www.bloomberg.com/news/articles/2018-08-06/iphone-chipmaker-blames-wannacry-variant-for-plant-closures


%% File partner programs: https://securelist.com/file-partner-programs/87136/


%% POC HTTP botnet: https://github.com/Souhardya/Uboat


%% MW analysis: https://blog.christophetd.fr/malware-analysis-lab-with-virtualbox-inetsim-and-burp/
%% Analysis VM: https://www.fireeye.com/blog/threat-research/2018/11/flare-vm-update.html



%% Finding malware on system: https://digital-forensics.sans.org/media/SANS_Poster_2018_Hunt_Evil_FINAL.pdf

%% Malware tracker: https://tracker.fumik0.com/

%% EKs https://blog.talosintelligence.com/2018/05/gandcrab-compromised-sites.html


%% Vs. Human rights activists: https://github.com/botherder/targetedthreats/wiki/Reports


%% Shadow Brokers: https://www.wired.com/story/nsa-leak-reveals-agency-list-enemy-hackers/



%% TODO: Roma 225 Campaign https://securityaffairs.co/wordpress/79324/malware/roma225-campaign-italian-automotive.html

%% TODO: Cyberwar predictions: https://www.zdnet.com/article/cyberwar-predictions-for-2019-the-stakes-have-been-raised/

%% TODO: Emotet: https://blogs.quickheal.com/beware-your-website-might-be-delivering-emotet-malware/

%% Getting a Windows vagrant machine:
%% https://app.vagrantup.com/Microsoft/boxes/EdgeOnWindows10


%% ## Turla

%% https://securelist.com/satellite-turla-apt-command-and-control-in-the-sky/72081/


%% --------------------
%% TODO hooking: https://vxug.fakedoma.in/papers/Common%20Language%20Runtime%20Hook%20for%20Persistence%20_%20Context%20Information%20Security.pdf
%% https://twitter.com/vxunderground/status/1209346055864815616?s=09
%% https://vx-underground.org/papers.html


%% TODO RAT collection: https://github.com/alphaSeclab/awesome-rat/blob/master/Readme_en.md

%% ## Malware simulators

%% TODO:  https://github.com/1d8/Coqui
%% TODO: https://0x00sec.org/t/coqui-a-keylogger-that-activates-for-only-banking-related-sites/22818

%% TODO: Malware analysis course: https://github.com/RPISEC/Malware
%% TODO: List of resources: https://github.com/Malware-Research/Resources

%% TODO: https://gist.github.com/hasherezade/e6daa4124fab73543497b6d1295ece10#file-injection_demos-md
