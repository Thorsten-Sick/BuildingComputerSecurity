# XSS

Also known as *Cross site scripting*

The attacker can enter some input into the web page. This input will be later displayed to another user. This could be blog posts, user names, ...

By setting this input to something that is valid html/javascript the attacker can then execute commands in the victim's browser.

One goal could be to extract the cookies. The JS command
*document.cookie* gets the local cookies (or writes them). The attacker will later send those cookies to an own server and collect them that way.

## Types of XSS

### Persistent XSS (aka Stored)

Where the attacker can write to a persistent database. When the victim visits, parts of the page are based on this DB.

### Non-Persistent XSS (aka Reflected)

The attacker can use the GET parameter in a URL. A malicious url with the malicious parameter is generated and the user is tricked into clicking it.

## Protection

PHP: Use *htmlspecialchars* on all data sent to the browser that could have been modified by a user. This will escape html characters

Python/Django: Does this escaping by default

%% TODO: CSP Content-Security-Policy "unsafe-inline" HTTP header
