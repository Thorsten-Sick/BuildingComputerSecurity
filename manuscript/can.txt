# CAN Bus {#chapter-can-bus}

C> Thorsten Sick

The CAN bus is central in many vehicles and other more complex embedded things.
It connects different micro controllers and systems in the vehicle. CAN is
simple and cheap - but not the most simple and not the cheapest connection in a system.

It is designed to be reliable - safety - but not for security.

CAN messages do have a message identifier and a payload. There is no *sender*
or *receiver* in the CAN philosophy.

The message identifiers do identify **what** is sent. And every chip listens and
reacts to the messages relevant to it.

On the physical layer: Lower message ids beat higher ones if a collision happens.

There are adapters to connect a PC to a CAN bus (PEAK, for example).

Linux is very well equipped to handle CAN - on current Linux variants you will
see it as a network interface like "can0".

## can-utils

On Linux the can-utils offer the basic command line bash interaction functionality.
As stated before, a can bus is just another network interface for Linux.

{lang="bash"}
    sudo apt-get install can-utils
    sudo ip link set can0 up type can bitrate 500000
    candump can0 -L

Now you should see a list of can messages scrolling through.

### candump

Candump dumps the can bus data onto stdout or into a log file. It is quite
simple to use and does not suffer from feature creep. Some switches to change
the log format exist. Just use the *man page* for details.

An example (data modified to prevent leakage):

{lang="bash"}
    (1535701844.518066) can0 1#DEADBEEF0FED
    (1535701844.531162) can0 2#C0FFEEBABE
    (1535701844.531164) can0 3#BEEF
    (1535701844.531164) can0 1#DEADBEEF0FDE

It contains

* timestamp
* interface being logged
* id#data

### Other tools in can-utils

The other tools in can-utils get a short mention. As I want to be flexible and
the python framework is powerful, I normally write small python scripts
instead of them. But if you as a bash nerd, they will be your choice.

Check the man page for details and start hacking.

**cangen**

A small can fuzzer. I missed the feedback loop and wrote my own script.

**cansniffer**

cansniffer is an enhanced logger.

**canplayer**

Replays a can logfile onto the bus. It also offers to use stdin. And as you
can modify the log file with a text editor before sending it is a simple way to
simulate specific scenarios and run them from command line.

**cansend**

cansend sends one or more can frames. It is a bit simpler than the canplayer
and a good tool for simple bash test scenarios.

%% TODO ## wireshark

### Raspberry Pi specific

While the PC Kali OS has drivers for the PEAK can controllers pre-installed,
they are missing for the Raspberry Pi (Kali and Raspbian have been tested).

But the company offered the source code and it is simple to compile them yourself.

You can find the driver source here: [PEAK driver source](https://www.peak-system.com/fileadmin/media/linux/index.htm)

{lang="bash"}
    sudo apt-get install linux-headers-$(uname -r) libpopt-dev
    wget https://www.peak-system.com/fileadmin/media/linux/files/peak-linux-driver-8.6.0.tar.gz
    tar xvzf peak-linux-driver-8.6.0.tar.gz
    cd peak-linux-driver-8.6.0
    make PCI=NO PCIEC=NO PCC=NO DNG=NO PAR=NO ISA=NO NET=NETDEV_SUPPORT
    sudo make install
    sudo modprobe pcan
    # check pcan devices
    cat /proc/pcan
    ifconfig -a

More in the forum:

[PEAK forum](https://www.peak-system.com/forum/viewtopic.php?f=59&t=283&start=90#p5327)

## Python

There is a python API to interact with can. For complex automation and tests I
would prefer that to the command line interface.

Automation includes stress testing and fuzzing.

[Python-can documentation](https://python-can.readthedocs.io/en/2.1.0/)

{lang="bash"}
apt install python3-can

or use *pip* to install it

%% TODO: Verify python example

{lang="python"}
    import can
    from can import Message
    bus = can.interface.Bus(bustype="socketcan", channel="can0", bitrate=500000)
    test=Message(arbitration_id=int("BEEF",16), data=[0x40, 0x00])
    bus.send(test)
    for msg in bus:
        if msg.data == bytearray(b'@\x00\x00\x01\x00\x00'):
            pass    # Do something

W> Be aware of the mixed data types in this example. The id is an int,
W> data is an array of int values. Result is a bytearray. Depending on your use case,
W> this could first cause some irritation.

One additional python module will be very handy to manipulate the binary data
payloads. Meet *python struct*. [Documentation](https://docs.python.org/3.7/library/struct.html) can be found online.

Short: It is a part of the python standard lib. It can *unpack* bytes into
several variables based on a defined format. Or it can *pack* several variables
into a binary representation based on a given format. One line will handle all
your data processing problems.

## Fuzzing the CAN bus with python

When I fuzz a device I will first find ways to detect if the device is behaving
normal: Read the firmware version by CAN bus and comparing the results to the
expected value. For example.

Better to use several simple tests and combine them.

Using a candump log I will estimate the expected data pattern and create a
python function that creates random data almost matching this data.

Add some additional bitflips.

Push this data into the CAN bus and check if it still responds and how.

If it breaks: Log away the last packet sent.

Rince and repeat.

For additional benefits:

* Reboot the device by power cycling it automatically after some packets
* Log more than one packet in case it breaks. Maybe the combination of those packets caused the failure

With the **candump** command and the python modules described in this chapter
you should now bre prepared to tackle this task.

Have fun.

## Further reading

%% [Build a can sniffer](https://www.karambasecurity.com/blog/2018-01-17-how-to-build-a-can-sniffer)

### The Car Hacker's Handbook: A Guide for the Penetration Tester

A very good book covering hacking of cars. With a big focus on CAN bus hacking.
There is a free version for it available on *opengarages.org* but this page
can currently not be reached. I wish you luck.

%% [Vehicle hacking blog post](https://fabiobaltieri.com/2013/07/23/hacking-into-a-vehicle-can-bus-toyothack-and-socketcan/)

%% [Cheap CAN Adapter](https://shop.8devices.com/usb2can?product_id=54)

%% TODO: http://savvycan.com/
%% TODO: https://github.com/collin80/M2RET

%% TODO: CAN-Bus Fahren https://media.ccc.de/v/8C8XTC
%% Macchina M2 Board zum Car hacken
