# Passwords
## PIN

Pins are very short (4-10), contain only numbers and are insecure. To still
make them fly (security wise) add a delay in between pins entered (1 second).
After the 3rd wrong entry either lock the system and request a special PIN
(smartphone SIM cards) or add a massive penalty (1 minute) which increases
during the next wrong entries.

## IoT: Initial passwords


Especially IoT devices and Routers have initial passwords. Some important wisdom:

* Force the user to change that on first use
* Do never derivate it from MAC adress or other system specific number
    * No fancy maths will protect you if you do. And MAC is broadcasted on Wifi
* Do not use a increment in the factory to initialise the first password
    * Add proper Randomness instead

## Entropy matters

Help the user to choose high-entropy passwords. Depending on the system the
user is using there are several different approaches to generate high entropy passwords.
Smartphone keyboards for example make it very difficult to enter special characters.
Maybe go for long passphrases instead ?
Also: Avoid the most common top 100 passwords (google for them). Have a list
in your app and blacklist them. Notify the user not to use those.

There is one exception for common passwords: One time accounts without personal data attached.
Things that can be stolen without pain. But as a normal user will not be able
to make this destinction - do not tell them.

One example of password entropy is the famous "Correct horse battery staple"
https://www.xkcd.com/936/

### Password generation

To help the user generate better passwords find a proper UI feedback to guide him.
Push the user towards better entropy. Either by suggesting additional character
types or longer passwords. Forced combinations like "Passwords must contain at least one ..." are not
always helping and can lead to worse passwords where users cheat to make simple
passwords fit the requirements.
Also have at least the top 50 passwords as a blacklist in the code. Google for
the top 50 passwords in your language.

Troy hunt has published the top hacked passwords as Sha1. You should hash your
users password and verify that it is not in the top Foo of this list before
accepting it. Foo depends on your security requirements and can be a
number around 1000 or better.

### Password hints

Don't

## Forgot password

While creating an account enforce and verify a link to a mail address.
This mail account is your "Trust Ancor" if the user forgets the password.
Create a reset link and mail the user. Make sure not to spam the user.
Do not revoke the old password until a new one is set.

Do not send a random password by mail but a (randomly generated) link to a
page you have to set a new password.

%% .. TODO: Google or Facebook logins


## Autofill trap

If you create a web page with a password form:
Do not allow autofill without user interaction on your web-page password pages.

Malicious Ads are currently creating invisible forms to steal those passwords.

https://www.theverge.com/2017/12/30/16829804/browser-password-manager-adthink-princeton-research

## Stolen passwords

%% .. TODO: Storing passwords - not in plaintext

Have I been Pwned: https://haveibeenpwned.com/

Hashes from there, cracked to 99% : https://hashes.org/leaks.php?id=515


## Wordlists

To crack passwords and effective seed for the tools are wordlists:

* http://www.adeptus-mechanicus.com/codex/hashpass/hashpass.php
* https://github.com/imsky/wordlists
* https://github.com/berzerk0/Probable-Wordlists

## Top passwords

Database of leaked passwords (sha1 hashes):

https://www.troyhunt.com/ive-just-launched-pwned-passwords-version-2/

To verify you user's new password is not in this list.

%% .. TODO: Find other top 50 passwords pages

## Alternatives

A paper on alternatives to password

http://www.jbonneau.com/doc/BHOS12-IEEESP-quest_to_replace_passwords.pdf


