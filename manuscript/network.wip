
# Network and infrastructure


## Grabbing IP addresses from ASN

whois -h whois.radb.net -- '-i origin AS36459' |grep -Eo "([0-9.]+){4}/[0-9]+" | uniq

by @notdan

## NMAP

https://linux-audit.com/linux-host-discovery-with-nmap/

[Nmap chapter](#chapter-nmap)

%% TODO: NMAP scripting, link to nmap


## Packet manipulation

https://github.com/secdev/scapy

## TCP strack fuzzing and testing: Packetdrill

https://github.com/google/packetdrill

## Router

https://thehackernews.com/2018/05/vpnfilter-router-hacking.html

UPNP:
https://blog.0day.rocks/hiding-through-a-maze-of-iot-devices-9db7f2067a80

## IPv6

https://linux-audit.com/linux-security-guide-for-hardening-ipv6/

## Firewall

https://linux-audit.com/bpfilter-next-generation-linux-firewall/

Basic firewall:
{lang="bash"}
    # Deny all
    iptables -P OUTPUT DROP
    iptables -P INPUT DROP
    iptables -P FORWARD DROP
    iptables -F

    # Allow outgoing
    iptables -A OUTPUT -j ACCEPT
    iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
    iptables -A INPUT -i lo -j ACCEPT

    # Allow http
    iptables -A INPUT -p TCP --dport 80 -j ACCEPT

    # Log strange stuff
    iptables -A INPUT -m limit --limit 10/m -j LOG --log-prefix="FW LOG DROPPED"


## Mitmproxy

https://mitmproxy.org/

%% https://github.com/RedTeamPentesting/pretender

## ARP

Netdiscover ARP scanner: https://sourceforge.net/projects/netdiscover/


## IPTables

[IPTables essentials](https://github.com/trimstray/iptables-essentials)

    **Deprecated: Is being replaced by NFTables**

[Nftables](https://wiki.archlinux.org/index.php/Nftables)

%% Polymorph: Network packet manipulation framework: https://github.com/shramos/polymorph
%% [PAcket crafting in python](https://scapy.net)
%% https://www.karlrupp.net/de/computer/nat_tutorial

## NTap

[NTap](https://github.com/botherder/ntap)
[Bridging WLan](https://serverfault.com/questions/152363/bridging-wlan0-to-eth0)

**brctl**: (deprecated)

**iproute2**

{lang="bash"}
    sysctl net.ipv6.conf.all.forwarding=1
    sysctl net.ipv4.conf.all.forwarding=1

    ip link add name br0 type bridge
    ip link set br0 up
    ip link set eth0 master br0   # Add eth0 to bridge
    ip link set eth1 master br0   # Add eth1 to bridge
    ip link set eth0 up
    ip link set eth1 up
    dhclient br0  # to get network settings back

    bridge link # Show existing bridges
    ip link delete br0 type bridge # Delete bridge

[Bridging](https://wiki.archlinux.org/index.php/Network_bridge)


## Sniffing

* driftnet: Find images in network stream
* urlsnarf: Find visited urls in HTTP stream

## Gaining control of the network settings

{lang="bash"}
    root@kali:/# nmcli networking off
    root@kali:/# ip link show wlan0
        2: wlan0: <...>
    root@kali:/# iw wlan0 link
        Not connected.
    root@kali:/# iw wlan0 scan
        <lots of nets>
    root@kali:/# wpa_passphrase <ssid> ~/wpa_supplicant.conf
        <password>
    root@kali:/# wpa_supplicant -i wlan0 -c ~/wpa_supplicant.conf
    root@kali:/# dhclient wlan0

Deleting the old ip address settings for a device:

If the connection only works partially (DHCP is dropped, ...) check
the bridge settings in /proc/sys/net/bridge. If in doubt: Try setting those values to 0.

Show them with

{lang="bash"}
    sysctl net/bridge


{lang="bash"}
    ip addr del 127.0.0.1 dev eth1


## Tunnel

### Chisel

https://github.com/jpillora/chisel


## Tools

%% TODO: Test and comment those tools

### Connection check

* ping
* traceroute
* tcpraceroute

### Downloading

* curl
* curl-impersonate (https://github.com/lwthiker/curl-impersonate)
* wget
* httpie

### TLS / SSL

* SSLyze

Things to check:

* heartbleed
* certificate validation
* renegotiation issues

Also: https://observatory.mozilla.org/

%% sslscan  git clone https://github.com/rbsec/sslscan ; make static; sslscan --no-failed --xml=nodegoat_SSLscan.xml nodegoat.kerokuapp.com

### DNS lookup

* dig
* nslookup
* whois

### SSH

* ssh
* scp
* rsync
* sftp

### PCAP

* ngrep
* tcpdump
* wireshark
* tshark (command line analysis tool)
* pyshark https://github.com/KimiNewt/pyshark
* tcpflow (assemble tcp streams)
* hping3 (create tcp packets)

eBPF based Ptcpdump extends tcpdump.

### Local network settings

* ifconfig
* route
* arp
* ip (replacement for ifconfig, route)  %% TODO: check what else. Get used to it
* ethtool (manage physical network devices)
* iw/owconfig  (manage wireless cards)
* sysctl (manage network stack)  %% TODO: Dig deeper

### Local network analysis

* netstat
* ss
* lsof
* fuser
* iptraf
* nethogs
* iftop
* ntop
* ab (benchmarking)
* nload
* iperf

### More offensive

* mitmproxy
* nmap
* zenmap (nmap gui)
* p0f (identify OS of host connecting to you)  %% TODO: Test

### More creative

* nc (manual tp connections)
* socat (proxy a tcp socket to a unix domain socket ++) %% TODO: Test

### VPN and encryption

* openssl
* stunnel (create a SSL proxy)
* openvpn (old vpn)
* wireguard (newer vpn)

### Firewalls

* iptables (old)
* nftables (new)

### Quick http server

* python3 -m http.server (serve files from a dir)

### Tools

* ipcalc: Calc ip addresses and masks

Source: https://wizardzines.com/#posters

%% Netcat das schweizer Taschenmesser für Netzwerke
%% Socat ist wohl eine verbesserte Version

%% Tool subfinder finds subdomains
%% gobuster for directory enumeration

%% Suricata
%%%%%%%%%%%
%% Grafische Darstellung der JSON: Evebox
%% "fritzdump" hilft bei pcap und fritz boxen
%% "tcpreplay" spielt pcaps wieder ins netz
%% eicar für netzwerke: http://testmynids.org/uid/index.html

%% Zeek
%%%%%%%%%%%%
%% https://zeek.org/

%% * supports scripting

%% * Can run on  multiple nodes

%% Security Onion
%%%%%%%%%%%%%%%%%
%% https://securityonionsolutions.com/

%% SNORT
%%%%%%%%%%
%% https://www.snort.org/  (IDS/IPS)




%% * Signature based detection
%% * Anomaly based detection
%% * heuristics analysis
%% * Protocol analysis

%% * file extraction
%% * TLS/SSL inspection


%% Detection tricks
%% Uncommon connections: Bits send7received, unexpected connection length

%% Test detection
%% continuously test own detection (scripted)
%% target are fake machines - this can be filtered
%% Get external audits

### Books

%% https://learning.oreilly.com/library/view/attacking-network-protocols/9781492067504/


%% IPOsint: https://github.com/j3ssie/IPOsint
%% OSint : https://github.com/kpcyrd/sn0int
%% https://github.com/FortyNorthSecurity/Just-Metadata

%% TODO: The future internet: https://www.itu.int/en/ITU-T/Workshops-and-Seminars/20181218/Documents/Geoff_Huston_Presentation.pdf

%% TODO: Shodan https://www.sans.org/blog/getting-the-most-out-of-shodan-searches/

%% TODO: Greynoise.io https://greynoise.io/

%% TODO: HFinger: https://github.com/CERT-Polska/hfinger  Recognizing malware network requests in pcap packages

%% TODO: Virtual Host scan: https://github.com/codingo/VHostScan

%% TODO: https://github.com/alphaSeclab/awesome-network-stuff

%% TODO: HTRAN connection bouncer https://github.com/HiwinCN/HTran

%% TODO: Data extraction from PCAP: https://github.com/lgandx/PCredz

%% TODO: Amass network mapping https://github.com/OWASP/Amass

%% TODO: Tool nethogs to find processes that use lots of bandwidth

%% Check IP on external databases (Virus Total...) https://github.com/jreisinger/checkip

%% GEOIP lookup https://github.com/axllent/goiplookup

%% TODO: Netcalc tool

%% https://github.com/jafarlihi/rconn

%% TODO: https://github.com/jafarlihi/rconn

%% https://www.inetsim.org/downloads.html

%% xray enhanced network scanner and osint https://securityonline.info/xray-tool-recon-mapping-osint-gathering-public-networks/

%% mDNS enumeration: https://github.com/evilsocket/spycast

%% Sicheres filesharing
%% OnionShare (pip hat die Kommandozeilenversion)
%% Unison

## Books

https://learning.oreilly.com/library/view/practical-security-automation/9781789802023/bae7eb09-119a-41a3-8112-cec27c36b844.xhtml#:-:text=The%20scope%20of%20infrastructure%20security
https://learn.cisecurity.org/benchmarks
https://static.open-scap.org/  (https://github.com/OpenSCAP/scap-workbench/releases)

%% DDOS tool https://github.com/MatrixTM/MHDDoS

%% TCP: Proxy and analyze: https://github.com/kevwan/tproxy

% Network speedbump net slowdown https://github.com/kffl/speedbump

%% Tool to check certs: certinfo

%% HTTP/2 : https://cloud.google.com/blog/products/identity-security/how-it-works-the-novel-http2-rapid-reset-ddos-attack?hl=en

%% Protocols using plaintext credentials: Telnet, FTP, SNMPv2, HTTP, old SMB

%% Insecure and deprecated: SNMPv1, SNMPv2c

%% Switch hardening; Use VLANs, enable port security, disable unused ports,limit number of MAC addresses per port, DHCP snooping, dynamic ARP inspection
%% VLans restrict broadcasts only tot he target VLAN

%% Firewall: egress filtering: Find breaches and reduce leaks
%% Do not forget IPv6 traffic !

%% TACACS+: Central authentication for network equipment ?

%% ARP poisoning/MAC spoofing: fight with port security, sticky ports, DHCP snooping, danymic ARP isnepction

%% Avoid amplification attacks through the network infrastructure

%% Public facing services on a CDN

%% Break down network into manageable zones /better to scan, firewall and reduces broadcast traffic)

%% Network ACL: A filter that restricts traffic between subnets and IP addresses. Applied by routers or simialar

%% NAC Network Access Control802.1X protocol, Authentication at the port level. Devices authenticate to be connected