# GIT hardening {#chapter-git}

The GIT ecosystem grew and GIT is one of the most used VCS nowadays. GIT itself does offer some features you can use to increase the security of the build process. In addition to that code hosters (like Github and Gitlab) offer additional CI/CD features to simplify the development process and - at the same time - improve code quality and security.

## Pure Git

Git allows to write *hooks* on certain events. Hooks are simple scripts in a special folder that are executed when this event occurs. These can be *pre-commit*, *post-checkout* or similar. In addition to the differentiation by event that triggers it there are two style of hooks:

**Local hooks** are client side and the developer maintains them to simplify their workflow.

**Server-side hooks** are run on the server. They can be run right before the push happens - and this way **enforce** a policy.

When setting up a team process it is smart to search the web for "git-hooks" and use it wisely to improve everyone's workflow (local hooks) and centrally enforce policy (server-side hooks).

This way especially security relevant things can be cared for ("does it compile without warnings ?" would be the simplest one).

Other ideas would be:

* Coding style
* Good (long) commit messages with links to issues
* Code changes only if unit tests are added as well

This has big benefits on:

* code quality
* enforces best practice even in dire situations
    * gives the developers an explanation towards management ("This will take one more hour, gotta do this right or it will not be checked in")
* lift team spirit, because **THE MACHINE** enforces the coding style, not this developer who is a grumpy guy and does not allow anything creative

Other problems this will prevent are VCS specific issues like "Do no commit credentials and secrets"







%% ## Security alerts
%%https://blog.github.com/2018-07-12-security-vulnerability-alerts-for-python/
%%https://github.com/srcclr/commit-watcher




%% TODO: GPG keys to GIT


%% SECURITY.md file:
%% - disclosure policy
%% - bug bounty ?
%% security@ address

%% Two factor authentication

%% Open Source testing: SonarCloud, CodeClimate, Snyk

%% TODO: Gerrit, collaborative code review tool for git

### Github

Github offers so called *actions* to create your own workflow for your project. Those actions can contain any tool that you read about in this book so far. For example: Static Code analysis. On certain stages in your coding workflow you can trigger those actions. Good stages can be:

* When someone starts a Pull Request
* When code gets merged into your master branch
* Before debug/release build

That way you can enforce a minimum code quality. Or run the unit tests before anyone has to review the code of the PR manually.

The configuration is managed in several *yaml* files you can create in the folder *.github/workflow*

Especially interesting for Pull Requests (PR) will be to **test only the changed files**. The trick to extract these look like:

{lang="bash"}
    - name: List changed files, check for string "do not release" as a test
      run: |
        URL="https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls/${{ github.event.pull_request.number }}/files"
        FILES=$(curl -s -X GET -G $URL | jq -r '.[] | .filename')
        ! fgrep "do not release" -q $FILES
        # Check if the text "do not release" is in a PR file. Fail the PR if it is.

## Getting it done

Sit down with your team, find a workflow to extend code quality, improve security and reduce manual work for Pull Requests.
Later on extend that to other stations of the life cycle of your projects. Like checking the main branch of your VCS on a daily basis. Or check before moving the code to production.