# Profiling / Performance

Making programs fast:

* Doing nothing is faster than CPU
* CPU is faster than Cache
* Cache is faster than RAM
* RAM is faster than disk
* disk is faster than network

Optimize:

* functions called often
* functions needing lots of CPU cycles
* Use many cores
* Get the program to sleep mode fast by completing the tasks
* Use events to trigger action, not timers and polling
* Keep data cache-sized. Do not switch between data structes (RAM-cache swap)
* Optimizing data structures and algorithms is essential in the planning phase
* Quick outs: For functions with a high chance of quitting early: Test soon and don't do what you do not need anyway
* Use the compiler's optimization. It knows best

## Perf

* Perf offers performance metrics for a process. CPU, swaps, Cache misses, ....

### Perf

### perf-top

### perf-list

### perf-record

### perf-report

## Python

### Coding tricks

%% Tip use "bisect" module for list search (sorted lists)

### PySpy

%% TODO: Performance/Profiler: PySpy (https://github.com/benfred/py-spy)
%% Does (not yet) have callgrind exports
%% PySpy is good to profile servers which do not terminate.
%% Offers a top style display !


### Timeit
%% Array types and numpy can be faster than lists
%% timeit module: Run from command line and test code snippets there, use IPython magic %timeit
%% the book has a decorator "timefn" for functions as example code

### CProfile

Good for functions
Can export statistics for pstats module
SnakeViz is UI for CProfile

### Line_profiler

### Memory_profiler

MProf memory profiler tool with diagram. You can add a timestamp to add markers to the profile
IPython %memit magic available

### Unix time tool


### Further Reading

Book "High Performance Python" (Preview)


### Other Things
%% TODO: Hotshot was a python 2 profiler
%% TODO: kcachegrind has conversion scripts for other profilers
%% TODO: PYthon 3 uses cProfile/profile for profiling (see default doc)
 or Yappi (https://pypi.org/project/yappi)  Python internal are: cProfile, Profile and hotshot. 

## C

### Valgrind

Valgrind is used to detect memory issues. But it can also be used to profile files

https://valgrind.org/docs/manual/cl-manual.html

### callgrind format

https://valgrind.org/docs/manual/cl-format.html

### gprof

* Compile and link with *-pg*
* gprof program > output.txt

## System

### OProfile

https://oprofile.sourceforge.io

should be in

{lang="bash"}
    apt install oprofile



### Powertop

## Display

### KCachegrind

## Compiler flags for performances

- O3
- fbranch-probabilities, run it, -fprofile-arcs

### System benchmark

tool: sysbench does memory, CPU, IO, ...
