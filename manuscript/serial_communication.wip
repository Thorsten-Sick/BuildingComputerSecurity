Serial Communication/UART:

https://learn.sparkfun.com/tutorials/serial-communication

Bus Pirate:
https://learn.sparkfun.com/tutorials/bus-pirate-v36a-hookup-guide
http://dangerousprototypes.com/docs/Bus_Pirate#JTAG_and_OpenOCD

Direct connection:  screen /dev/ttyUSB0 115200
Ctrl+A, K disconnects

Python: https://github.com/DangerousPrototypes/Bus_Pirate


Hardware Implementation of serial communication can be:
* TTL: transistor-transistor logic, common. Between microcontrollers
* RS232: ancient. For long transmissions

* RS-485: More complex than RS-232 but better suited

UART: The circuit responsible to implement serial communication. Eight parallel data lines to Serial RX/TX
Microcontrollers can have 1-X UARTS. Some UARTs have internal buffers tos tore the data until the controller fetches it.

Modbus:

## I2C:
https://learn.sparkfun.com/tutorials/i2c
Linux Tools: https://i2c.wiki.kernel.org/index.php/I2C_Tools
http://www.netzmafia.de/skripten/hardware/RasPi/RasPi_I2C.html

I2C chips can have their ID set by pins being pulled low/high. That way several chips can be attached to the same data wires.

sudo apt install i2c-tools python-smbus libi2c-dev

Sparkfun Pi Wedge(https://www.sparkfun.com/products/13717) plus Raspberry Pi plus I2C IO Expander MCP23017 (http://ww1.microchip.com/downloads/en/DeviceDoc/20001952C.pdf) 

The wiring of the experiment.

|Raspberry|MCP23017     |Bus Pirate|+/-|
|---------|-------------|----------|---|
| SCL     | (12) SCL    | CLK      |   |
| SDA     | (13) SDA    | MOSI     |   |
|         | (10) VSS    |          | - |
|         | (9) VDD     |          | + |
| 3,3V    |             |          | + |
| GND     |             |          | - |
|         | (15) A0     |          | - |
|         | (16) A1     |          | + |
|         | (17) A2     |          | - |
|         | (18) Reset  |          | + |
|         | (21) GPA0   |          |   |

A0-A2 define the address of the MCP.

Pin 21 is connected to: A resistor, then LED (+), then ground

%% Bus Pirate cable: http://dangerousprototypes.com/docs/Common_Bus_Pirate_cable_pinouts


Example set:

i2cset -y 1 0x22 0x00 0x00  # Bank A output  ( in sheet: IODIRA and I/O Direction Register)
i2cset -y 1 0x22 0x12 0xFF  # ALL LEDs on    (in sheet: GPIOA and values)
i2cset -y 1 0x22 0x12 0x00  # ALL LEDs off 

%% http://dangerousprototypes.com/blog/bus-pirate-manual/i2c-guide/

Command:
* -y 1 : I2C Bus on Raspberry Pi
* 0x22 Address of I2C Expander
* First value: Command
* Second value: value of command

smbus:

import smbus

address = 0x22
mcp = smbus.SMBus(1)  # Pi default bus
try:
    mcp.write_byte_data(address, 0x12, 0x01)   # For MCP: address, command, value
except OSError:
    pass   # Re-try is better, it is not very reliable


I2C Bus pirate python example:
http://dangerousprototypes.com/docs/Bus_Pirate_Scripting_in_Python

Bus pirate macros:
(1): Scan for devices
(2): Sniff commands

Send commands:
[0xAddress 0xFoo 0xBar ...]
(See sniffing)


%% TODO: i2cdump, i2cget

SPI:
https://learn.sparkfun.com/tutorials/serial-peripheral-interface-spi

%% Silicon labs CP2104 USB-to-UART
