# Asserts {#chapter-asserts}

Asserts are debugging tools.

They are a building block to guarantee **robust** code. And robust code is
the foundation for secure code.

Basically they test for program states **that should never happen**. If they
trigger they terminate the program right away. That way it is quite simple to
detect defects.

In C asserts are only active in the Debug version of the program.

A simple way of doing module tests "light" (as in "unit tests") is to use an assert.
Asserts are used during the development and debug phase and will be switched off
in release (by define NDEBUG for C). Asserts make sure a certain condition is
true. If not, the program aborts and you can start debugging it.
By using asserts you can trigger this easy-to-debug abort program crash to the issue
where an invalid state has been generated. Without an assert it could happen
that your program limps on and crashes in some very unrelated function.
Debugging that is much harder.

Good places to put you assert-commands are at the *beginning* and the *end*
of functions and *after complex calculations* internally.

You should never check any state with asserts that could theoretically happen
in your program. For that there is normal error handling code.

## Asserts in C

{lang="c"}
    a = malloc(10);
    if (a == NULL)
    {
        return ERROR;
    }

Good things to check are pointers in parameters where the contract
defines that they must point to a structure:

{lang="c"}
    #include <assert.h>
    // ...
    // function starts, mypointer is a parameter
    assert(mypointer != NULL);

or indexes / counters (here check for min/max value):

{lang="c"}
    assert(size > 0);
    assert(size < MAXSTRING);

As said before:

* Do this at the beginning of your functions for all parameters
  * If you verify the parameters at runtime: assert afterwards to check your verification code
* Do this at the exit of your function with all return values
* Maybe: Do this in complex calculations in the function core
* Before calling 3rd party functions check you honour their contract
* After calling 3rd party functions: To verify they did not change their contract

For release compile you will switch it off with **NDEBUG**. So there will be no
runtime penalty for extreme validation.

There is no reason to hold back when adding asserts.

## Assert for python

{lang="python"}
    >>> assert(False)
    Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
    AssertionError

Assertions in python trigger *AssertionError* exceptions. They can be
de-activated by the python command line switches *-O* or *-OO*
(basic and extended optimization).

## Javascript

{lang="javascript"}
    > console.assert(false,"testmessage")
        AssertionError [ERR_ASSERTION]: testmessage
            at Console.assert (console.js:194:23)

The disadvantage is that can not been toggled. It is active in *release*
and *debug* version. Which makes agressive usage of asserts risky. IMHO this
difference in usage is so hughe that I would dare to call it "assert in name only".

%% TODO: Assert for C# Debug.Assert()

## Positive side effects of asserts

Asserts have positive side effects besides helping you finding bugs much faster.

* They guarantee that the contract of your functions is respected if someone else is using them
* Asserts improve [fuzzing](#chapter-fuzzing)
* Asserts help to document your contracts
* Asserts are a good first step if you want to dissect your program into pieces to introduce unit testing
