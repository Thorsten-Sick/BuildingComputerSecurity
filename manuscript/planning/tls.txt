# TLS aka SSL aka HTTPS {#chapter-tls}

TLS is the name of the newer versions of the SSL protocol. HTTPS is HTTP over TLS, a common use case.
But TLS can be used to secure all kinds of connections.

By using TLS you get **authenticity**, **integrity** and **confidentiality** and you really want those.

**authenticity** is identifying the other communication partner. Especially the web server out there. By checking that it protects against MITM attacks and DNS spoofing attacks.

**integrity** is protection against modification of the data in transit. For example replacing the receiver of a large money transfer.

**confidentiality** is hiding the content of the message from spies.

What you do not get is the hiding of the identity of the communication partners. For that you would need TOR or similar technology.

TLS is a protocol that defines how computers negotiate their encryption settings and do the encryption afterwards. By using TLS the client (browser or similar) and the server (web server) negotiate their features and choose the best of the available options.
The options are different combinations of algorithms and their settings. It offers to choose between different algorithms being used as a kind of set of building blocks. Depending on your situation (especially: Are old systems involved) you can have TLS go for the more secure or the weaker algorithms.

Current version of TLS is 1.3.

Between TLS version steps there are several years. A step in a minor version number means lots of improvements. TLS 1.3 is a re-work that removes many of the security issues the old versions had.
Especially risky features and parameters that could be used in TLS < 1.3. Long story short: Use TLS 1.3.

For the transition phase you could monitor the versions used to connect to your servers and de-activate old versions you do not see anymore. Older versions have vulnerabilities.

## TLS handshake

A simplified handshake for browsers to web servers looks like

![Simplified TLS handshake](../../images/tls_simple.png)

The relevant part is where browser and server negotiate TLS version and Cipher suite. The browser offers all variants it can manage. The server selects the most secure one that matches its own configured options.

To also support older browsers servers can have a set of weak and broken cipher suites in the option list.

For a more secure web site (banking) it could be wise to monitor the version of browsers connecting and weed out less secure fallback ciphers from the
server config on a regular basis.

If you want to dig much deeper into the TLS 1.2 protocol, see the ["The Illustrated TLS Connection"](https://tls.ulfheim.net/).

There is also [one for TLS 1.3](https://tls13.ulfheim.net/)

## What to encrypt (for web pages)

It is possible to encrypt only selected parts of a page (login form, for example).

So what to encrypt ? The answer is:

**Encrypt everything**

For several reasons:

* Encrypted pages get a better Google ranking
* Encrypted pages will not show a "this side is insecure" URL bar in the browser
* You will not forget to encrypt sensitive parts of your page if you encrypt everything
* An active attacker can modify unencrypted parts of the page while the data is in transit (for example if the attacker is on the same WiFi network as the victim)
    * The attacker will the modify the link to the login form
    * The new link will point to an attacker controlled server
    * This server could offer encryption (for a better reputation)
    * And the login credentials the user enters will now be phished by the attacker.
    * Afterwards the attacker can redirect the user to the real server (entering the credentials just stolen for the user)
    * The user will not know he was attacked

These are the reasons why you should **Encrypt everything**

Tools for that kind of attacks are:

* [MITMPROXY](https://mitmproxy.org/)
* [WiFi Pineapple](https://www.wifipineapple.com/)
* [Fiddler](https://www.telerik.com/fiddler)

%% Intercept traffic by instrumenting target process https://github.com/SySS-Research/hallucinate

## Mozilla server side TLS config guide

TLS is a toolbox for encryption which is mainly used in the browser to server communication. For this reason Mozilla offers a simple guide how to best set up your server.

[Mozilla TLS guide](https://wiki.mozilla.org/Security/Server_Side_TLS)

## Certificates

TLS requires the server to have a certificate.

Normally the server authenticates itself with a certificate. Those certificates are verified by a Certificate Authority (CA). This one can either sign either "This person controlled the infrastructure when we checked" or the more expensive "Extended Validation" certificate "This person has the name Mr. Foo Bar and lives in Wherever, we checked the passport".

The certificate system has serious flaws. Basic sin is trusting at least dozens of companies that can sign any kind of certificate. Which will then be trusted.

Despite the flaws: Not verifying the certificate properly is much worse. So go with the current CA system even if it is not perfect.

The project *Certificate Transparency* wants to fix this (see below). You can add CT on top of the classic CA system.

**Let's Encrypt** is a new initiative with a set of tools and infrastructure where everyone can get themselves a certificate within minutes and for free. Those are just not EV certificates.

Not hiding it: The simplest kind of certificates are *self signed* certificates. No CA signed it and the clients will normally complain and have you
manually accept it as a user.

Thanks to Let's encrypt you should not need those self signed certificates anymore.

%% TODO Add Let's Encrypt chapter

%% [Let's Encrypt wildcard](https://community.letsencrypt.org/t/acme-v2-and-wildcard-certificate-support-is-live/55579)

%% TODO Verify certificate (host name !)

%% TODO: Verify
%% snap install --classic certbot
%% ln -s /snap/bin/certbot /usr/bin/certbot
%% certbot --nginx    or certbot --apache

%% TODO: Certificates do not verify the *content*. Just the *server* and EV certificates the *owner*

## Certificate content and structure

Certificates can be stored in different container formats. Conversion can be required.

Common is PEM (base64 encoded x509 ASN.1). X509 is a standard.There is also DER (with filenames like .cer, .crt, .der) basing on the X.690 standard.

## Revocation (OCSP = Online Certificate Status Protocol)

If control over a certificate gets lost (as in "server hacked, it had the key on it...") the certificate needs to be revoked. Together with CRL (Certificate Revocation Lists) this online protocol
and the servers using it offer revocation management.

The bad news is - It does not work properly: If an attacker is able to fake a certificate, the attacker can as well block the connection to those revocation servers. How should the browsers react ? Block the connection (and do that whenever the revocation server can not be reached) or allow it and do not block the attack ?

This system is quite broken and browser vendors did not find a good solution. So basically the revocation verification code directly contacting the
revocation servers is switched off.

But: **OCSP Stapling** solves this problem.

## OCSP Stapling

Here the server serving the homepage does not only send the certificate but also a signed validation (signed by the validation server) that the certificate was not revoked. This validation has a time stamp and a very short time to life (minutes, not months). For this reason the web-server has to renew the validation for its own certificates quite often.
This system fixes the OCSP problem because no extra connection from the client to a revocation server needs to be established.

## Key/Certificate lifetime

Certificates have a lifetime. After this they have to be renewed. The first reflex of any admin is to set it high (2 years) when creating a certificate
and be done with it. This results in all those pages where the certificate timed out and no one can remember how to refresh it. Happens all the time and I know you saw that happening.

The true simple path is to set it to a short life time (weeks) and implement an automatic renewing process right from the start. With this short life time renewing is directly tested while you still remember what you did and everything is smooth.

## Testing TLS

SSLLabs offers a testing service that checks the TLS settings of your web page. [SSLLabs](https://www.ssllabs.com/). They also offer lots of guides and documentation. Monitor the configuration of your servers regularly (there might be a new attack available to the bad guys).

## HSTS - HTTP Strict Transport Security

HTTP servers can send a special header promising to *always* encrypt and prevent downgrade attacks down to HTTP that way. The browser will store the fact that there is TLS encryption available for this server every time after the first connection and is now immunized against MITM attacks. It will always replace *HTTP* URLs with *HTTPS* ones and handle encryption failures as hard errors.

The HTTP header for that looks like:
{lang="bash"}
    Strict-Transport-Security: max-age=31536000

This is a TOFU (trust on first use) technology and the attacker can intercept the first connection between client and server, deleting the special HSTS header.

As an option the browser vendors offer a *preload list* where web sites can register and get their HSTS setting [preloaded](https://hstspreload.org/) into the browsers.

[More on configuring HSTS](https://linux-audit.com/configure-hsts-http-strict-transport-security-apache-nginx/)

## HPKP - HTTP Public Key Pinning

HPKP offers more security against MITM attacks. With lots of nasty side effects. For HPKP a header in the
HTTP protocol defines a key id [^foot_hpkp]. The browser stores that and will now only:

* always communicate encrypted with this page (see: HSTS)
* only accept this specific key

This is also a TOFU technology.

As many things can go wrong (keys lost) and pages could be permanently unreachable for a group of users afterwards you will want to have fallback plans/keys, ... or maybe use other technologies. If you can use HPKP in a reliable way: Great. If you do not feel comfortable: Do not use it.

Update: Acceptance of HPKP was low. As it is a tricky technology to use. Chrome 72 deprecated it. This technology is described here for historical
reasons and maybe you can learn something from it.

[^foot_hpkp]: If you are smart you also offer a second id of a backup key

%% TODO; [quotes](https://textslashplain.com/tag/security/) for quotes and details

## Certificate Transparency

[Certificate Transparency](https://www.certificate-transparency.org/) is a Google project to extend the CA way of certificate validation and maybe replace it in the future.

Special online services will create logs of certificates seen in the wild. Any anomaly can be
found that way (like faked Google page certificates only seen by computers in Foobaristan).

This is already used in Chrome and turned up some nasty certificates being used by attackers.

For a live stream of CT entries you can monitor the CT system using tools like [certstream](https://certstream.calidog.io/).

%% TODO Different TLS libraries

## UDP: DTLS

Datagram Transport Layer Security is the UDP version of TLS.

## Weaknesses and catastrophes

The issues that happened the last years have been found on several layers:

* Broken algorithms
* Issues with the TLS protocol
* Problem with the implementation (libraries)
* Rogue CAs
  * [DigiNotar](https://en.wikipedia.org/wiki/DigiNotar)
  * [Symantec (VeriSign)](https://security.googleblog.com/2017/09/chromes-plan-to-distrust-symantec.html)

## Testing SSL

[badssl](https://badssl.com/) offers several sub-domains with different creative TLS/SSL configuration to test your endpoint.

There is also one page that will never use SSL/TLS and can be quite handy for testing. For obvious reasons it is named [neverssl.com](http://neverssl.com/)

## Further reading

### Serious Cryptography by Jean-Philippe Aumasson

[Serious Cryptography](https://learning.oreilly.com/library/view/serious-cryptography/9781492067511/) is Mathematics paired with some hands-on. It contains lots of common mistakes being made when using those algorithms and protocols. It should be on your desk when building something with cryptography.

### The Mozilla TLS guide

[Mozilla TLS guide](https://wiki.mozilla.org/Security/Server_Side_TLS) is a collection of TLS server settings for different situations. A good cheat sheet ranking the current quality of algorithms in a pragmatic ("don't break the web") environment.

### Statistics

[Google HTTPS transparency report](https://transparencyreport.google.com/https/overview)

### Talks

* [35C3 The rocky road to TLS 1.3 ...](https://media.ccc.de/v/35c3-9607-the_rocky_road_to_tls_1_3_and_better_internet_encryption)

%% TODO: Check out [NoGotoFail](https://github.com/google/nogotofail)


%% TODO:
%% [ciphersuite](https://www.wst.space/ssl-part1-ciphersuite-hashing-encryption/)
%% [DH key exchange](https://www.wst.space/ssl-part-2-diffie-hellman-key-exchange/)
%% [CA](https://www.wst.space/ssl-part-3-certificate-authority/)
%% [TLS 1.3](https://blog.cloudflare.com/rfc-8446-aka-tls-1-3/)

%% [Playback TLS](https://blog.talosintelligence.com/2018/08/playback-tls-story.html?utm_source=dlvr.it&utm_medium=twitter&utm_campaign=Feed%3A+feedburner%2FTalos+%28Talos%E2%84%A2+Blog%29)


%% [Deploying TLS 1.3](https://code.fb.com/networking-traffic/deploying-tls-1-3-at-scale-with-fizz-a-performant-open-source-tls-library/)

%% HTTP/HTTPS connection debugging, response headers and mixed content using nmap, Mozilla observatory and SSL labs [htrace](https://github.com/trimstray/htrace.sh)

%% TODO: Read: [Mission Accomplished? HTTPS Security after DigiNotar](https://datatracker.ietf.org/meeting/103/materials/slides-103-irtfopen-johanna-amann-anrp-talk-mission-accomplished-https-after-diginotar-02)

%% TODO: [Code certificate chain attacks](https://posts.specterops.io/code-signing-certificate-cloning-attacks-and-defenses-6f98657fc6ec)

%% TODO: Building certificate chain [sslmerge](https://github.com/trimstray/sslmerge)

%% TODO: Add https://httpswatch.com

%% TODO: https://github.com/drwetter/testssl.sh  SSL/TLS test tool

%% TODO: https://decoder.link/

%% SSL Configuration generator for webserver, databases and similar: https://ssl-config.mozilla.org/