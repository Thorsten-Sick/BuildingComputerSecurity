# Vulnerabilities {#chapter-vulnerabilities}

C> By: Thorsten Sick

C> For: Managers, Developers, Testers

Vulnerabilities want to be managed. And fixed. To get the terms right:

* **Bugs** are mistakes in **code**
* **Flaws** are mistakes in the **design** of the software
* **bugs** and **flaws** *can* be **vulnerabilities
* *some* vulnerabilities can be **exploited**
* *some* **exploits** can be **weaponized** - made simple to use and reliable
* **vulnerabilities** can also be patched.....
* and the **patch** can be applied to all the systems

So it is a race between the attackers - wanting to get to the stage of
exploit or weaponized exploit and the defenders - wanting the patches rolled
out to all of their customers.

The tricky part is not to miss the start of the race. And be well organised to
push towards the goal.

For the defenders it starts as soon as they learn about the bug/flaw.
For the attacker it also starts at that stage of finding a bug/flaw. Worst
case for the attacker: A patch is already developed and the attacker
reverse-engineers it to find the bug.
In that case:
* Less effort for the attacker
* The race for the attacker gets shorter: From the patch stage to where the last customer applied the patch.

There are vulnerabilities only known to the defenders. Or only known to the attackers.
So one party can already run the race while the other is waiting for the start.

Knowledge management and starting early is essential here.

## Vulnerability knowledge pools

There are several pools where knowledge about vulnerabilities can be found:

* Public knowledge, weaponized exploits: [Metasploit](https://www.metasploit.com)
* Vendor internal - found internally or thanks to bug bounties [Google Chrome example](https://www.google.com/about/appsecurity/chrome-rewards/)
* Public knowledge [CVE](https://cve.mitre.org), [Rapid7](https://www.rapid7.com/db/vulnerabilities), [VulDB](https://vuldb.com) or [NVD](https://nvd.nist.gov/vuln/)
* The darker markets for exploits [Zerodium](https://zerodium.com) - they are not interested in patching vulnerabilities

## Building bugs and flaws

A system/program can get bugs and flaws from different sources:

* As a managed system by the installed applications (written by third parties)
* As a software project by third party libraries
    * Old library version used - the vulnerability is known
    * Current library version used - the vulnerability is unknown
* As a software project by flaws/bugs introduced by your own team

## CVSS Score

In many cases it is harder to triage if a reported bug if it is also a
vulnerability than to just fix it. In this case: I would just fix it.

For the harder cases you can do:

* Get a POC exploit and have your testers reproduce it
* Calculate the CVSS score - which indicated how serious this bug is
    * [CVSS-V3 calculator](https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator)
* Prioritize the bug into your backlog



## Security process

Managers can build [internal processes](#chapter-security-process) to manage vulnerabilities and to avoid them.
Developers and testers can avoid them during the development phase or detect
them while testing.

There are chapters in this book covering this - because it is the essence of security.

%% TODO: Add to test cases to avoid regression

%% ## Search engines

%% [Sploitus](https://sploitus.com/)
%% [CVS](https://cve.mitre.org)
%% [NVD](https://nvd.nist.gov/vuln/)
%% [Google hacking](https://www.exploit-db.com/google-hacking-database/)

%% [Rapid 7 vulnerabilities](https://www.rapid7.com/db/vulnerabilities)
%% [Vuldb](https://vuldb.com)

%% [Explit-db](https://www.exploit-db.com)

%% # snyk.io

%% # Measuring impact of vulnerability (Common vulnerability scoring system)
%% # [CVSS](https://nvd.nist.gov/vuln-metrics/cvss)

%% # Exploitation

%% ## Post exploitation

%% [Linux post exploitation](https://guif.re/linuxeop)


%% TODO:  [Privilege escalation by AV software](https://hackercombat.com/new-trend-antivirus-software-exploited-to-launch-privilege-escalation-attack/)

%% TODO: [Beebug](https://github.com/invictus1306/beebug)

%% TODO: [Funtrace](https://github.com/invictus1306/functrace)

%% TODO: [DLL hijacking](https://gaissecurity.com/yazi/discovery-of-dll-hijack-on-trend-micro-antivirusplus-cve-2018-18333)

%% [Vulnerability management App](https://thehackernews.com/2018/12/whitesource-bolt-github-security.html)

%% TODO: Metasploit, Armitage
