# Vulnerabilities {#chapter-vulnerabilities}

Vulnerabilities have to be managed. And fixed. To get the terms right:

* **bugs** are mistakes in **code**
* **flaws** are mistakes in the **design** of the software
* **bugs** and **flaws** *can* be **vulnerabilities**
* **weaknesses** are bugs or flaws that could be **vulnerabilities**
* *some* vulnerabilities can be **exploited**
* *some* **exploits** can be **weaponized** - made simple to use and reliable
* **vulnerabilities** can also be patched.....
* and the **patch** can be applied to all the systems
* **managing** vulnerabilities is the awareness of the current state of the system - as realistic as possible
* **fixing** vulnerabilities (and rolling out the update) removes them

This is a race between the attackers - wanting to get to the stage of *exploit* or *weaponized exploit* and the defenders - wanting the *patches rolled out* to all their customers.

The tricky part is not to miss the start of the race. And be well organised to push towards the goal.

For the defenders it starts as soon as they learn about the bug/flaw. For the attacker it also starts at that stage of finding a bug/flaw.

A special case is when updates are rolled out slow:
A patch is already developed and the attacker reverse-engineers it to find the bug.
In that case there will be:
* Less effort for the attacker
* The race for the attacker gets shorter: From the patch stage to where the last customer applied the patch.

There are vulnerabilities only known to the defenders. Or only known to the attackers. One party can already run the race while the other is not aware there is a race happening.

Knowledge management and starting early is essential here.

## Vulnerability knowledge pools

There are several pools where knowledge about vulnerabilities can be found:

* Public knowledge, weaponized exploits: [Metasploit](https://www.metasploit.com)
* Vendor internal - found internally or thanks to bug bounties [Google Chrome example](https://www.google.com/about/appsecurity/chrome-rewards/)
* Public knowledge [CVE](https://cve.mitre.org), [Rapid7](https://www.rapid7.com/db/vulnerabilities), [VulDB](https://vuldb.com) or [NVD](https://nvd.nist.gov/vuln/)
* The darker markets for exploits [Zerodium](https://zerodium.com/program.html) - they are not interested in patching vulnerabilities

You can use them in different ways:

* Monitor for vulnerabilities in your own products
* Watch for vulnerabilities in libraries and tools your product uses
* Learn from other projects mistakes and check if you have similar vulnerabilities

## Building bugs and flaws

There are different ways a bug or flaw are introduced into your system:

* in a managed system by the installed applications (written by third parties)
* In a software project by third party libraries
    * Old library version used - the vulnerability is known
    * Current library version used - the vulnerability is unknown
    * The library is malicious
* In a software project by flaws/bugs introduced by your own team

Keep close track on those sources of vulnerabilities

## CVSS Score

In many cases it is harder to triage if a reported bug is also a vulnerability than to just fix it. In this case: I would just fix it.

For the harder cases you can do:

* Get a POC exploit and have your testers reproduce it
* Calculate the CVSS score - which indicated how serious this bug is
    * [CVSS-V3 calculator](https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator)
* Prioritize the bug into your backlog
* Fix it
* Roll out the update

And constantly check if the vulnerability stays fixed or if you have a regression. Use automated tests here.

## OWASP Risk Rating

The OWASP Risk Rating is a similar system to assign a score to a vulnerability. It also takes the skills of a potential attacker into account.

[OWASP Risk Rating](https://owasp.org/www-community/OWASP_Risk_Rating_Methodology) also comes with a convenient [online calculator](https://www.owasp-risk-rating.com/).


## Security process

Managers can build [internal processes](#chapter-security-process) to manage vulnerabilities and to avoid them.
Developers and testers can avoid them during the development phase or detect them while testing.

There are chapters in this book covering this - because it is the essence of security.

## Search engines for exploits and vulnerabilities

Basic sources for the newest exploits are either *search engines* or *mailing lists*. Both have a strong focus and bias. I suggest you either use several or experiment with them to find the one matching your requirements.

Some exploit tools (Metasploit) are also a good source for exploits. Going for the paid version is smart if you want the newest exploits.

Search engines to try are:

* [Sploitus](https://sploitus.com/)
* [CVE](https://cve.mitre.org)
* [NVD](https://nvd.nist.gov/vuln/)
* [Vuldb](https://vuldb.com)
* [Exploit-db](https://www.exploit-db.com) Also offers links to the vulnerable binaries to train exploitation on
* [Rapid 7 (Metasploit) vulnerabilities](https://www.rapid7.com/db/vulnerabilities)
* [snyk.io](https://snyk.io)
* [OSV Open Source Vulnerabilities](https://osv.dev/)
* [Globalsecuritydatabase](https://globalsecuritydatabase.org/)

A special case if you are more interested in web security is this sub-database for [Google hacking](https://www.exploit-db.com/google-hacking-database/)


%% # Exploitation

%% ## Post exploitation

%% [Linux post exploitation](https://guif.re/linuxeop)


%% TODO:  [Privilege escalation by AV software](https://hackercombat.com/new-trend-antivirus-software-exploited-to-launch-privilege-escalation-attack/)

%% https://github.com/Ignitetechnologies/Privilege-Escalation

%% TODO: [Beebug](https://github.com/invictus1306/beebug)

%% TODO: [Funtrace](https://github.com/invictus1306/functrace)

%% TODO: [DLL hijacking](https://gaissecurity.com/yazi/discovery-of-dll-hijack-on-trend-micro-antivirusplus-cve-2018-18333)

%% [Vulnerability management App](https://thehackernews.com/2018/12/whitesource-bolt-github-security.html)

%% TODO: Metasploit, Armitage


## Fixing Bugs - tasks for management

As bugs can be vulnerabilities, you should mentally prepare for them. Prepare your bug tracker, developers and QA engineers and give them space to create a solid product.

This will mean protecting the team from a flood of challenging feature requests.

Set up your build process to detect bugs early and get them fixed soon. The time scale here is the development phases.

Those are:

* Planning/Design
* Coding
* Internal testing
* External testing (Beta)
* Release
* Maintenance

Fixing bugs in the early phases is cheap. While fixing a design bug (called "flaw") after release can be horribly expensive - you have to process the change through all the phases between *design* and *release*.

TL;DR: Fix bugs early. Verify your design. Fix bugs fast.


%% https://github.com/github/advisory-database

%% use after free: https://www.youtube.com/watch?v=PKqMsaKGdlM

%% Scan for vulnerabilities in binaries (Ghidra): https://github.com/KeenSecurityLab/BinAbsInspector

%% https://www.cvedetails.com/
%%