# Software Design {#chapter-design}

Architecture and design already starts long before someone starts to code. As it can also include preparing the environment, tools and getting the requirement it has a blurred line to management tasks.

Microsoft had a very bad security reputation many years ago. This is why they started to use their "Security Development Life cycle" in their project - resulting in incredible security improvements.

The [SDL](https://www.microsoft.com/en-us/sdl) covers much more than just development and a bit of testing.

Other tasks are for example:

* Provide Training
* Define Security Requirements
* Establish a Standard Incident Response Process

Which are more processes to be set up by management. More can be found in the [SDL documentation](https://www.microsoft.com/en-us/securityengineering/sdl/practices)

Security is a team effort.

This chapter will now pick some topics more on the management side (and less techy). It is "preparing the battle ground".

## Infrastructure aka "Establish a Standard Incident Response Process in SDL"

* Have an email address to report vulnerabilities to like security@domainname.com
* Add a PGP key for this address. And train everyone to use it properly
* Prepare a [security.txt](https://securitytxt.org/)
* Put it onto your homepage
* Publish the PGP key on your homepage
* Prepare bug trackers (special flags)
* Have processes for forwarding vulnerabilities into the bug tracker
* Have an internal wiki to share experience and knowledge
* Collect "lessons learned" into this wiki

## Complexity

Complexity kills. The more features you add, the more complexity will be added to the system. Complexity makes it harder to maintain the system and to secure it.
Be aware of your complexity budget and all your plans (see "updates") depend on that.

|Feature                           |  Complexity cost |
|----------------------------------|------------------|
|Network connection                |High              |
|----------------------------------|------------------|
|Wireless/Bluetooth                |High              |
|----------------------------------|------------------|
|OS (multi process)                |High              |
|----------------------------------|------------------|
|Passwords                         |Medium            |
|----------------------------------|------------------|
|External drives                   |Medium            |
|----------------------------------|------------------|
|life cycle <1 year                |Low               |
|----------------------------------|------------------|
|1-5 years                         |Medium            |
|----------------------------------|------------------|
|5+ years                          |High              |
|----------------------------------|------------------|
|Processes binary data (files, ...)|Medium            |
|----------------------------------|------------------|
|written in C/C++                  |High              |
|----------------------------------|------------------|
|JavaScript...                     |Medium            |
|----------------------------------|------------------|
|JS with Frameworks                |High              |
|----------------------------------|------------------|
|Python                            |Low               |
|----------------------------------|------------------|
|Kernel drivers                    |High              |

## System architecture

* Isolate mission critical system from systems that can be DOS-ed. This will relax a ransom situation.
* Plan for recovery
* Plan for post incident analysis
* Avoid vendor lock in
* Data files you use should contain a version number for the structure. This frees you to push new versions of the software which can open the old variant as well

%% TODO: Maybe split "processes in company" out of infrastructure (bug reporting, ...)

## Set up a reliable build system

To maintain flexibility, automatically reduce issues and keep your engineers focused on the real issues plan a good build system early on.

[34C3: Hardening Open source development](https://media.ccc.de/v/34c3-9249-hardening_open_source_development)

* Tools have their own package managers - maybe sandbox dev environment ?
* VCS can have shell code attached (git hooks) - use them
* Build environment could leak keys and credentials....verify that by tools
* Go for reproducible builds
* Trusting external lib repos (npm, ...) is tricky. Reduce dependencies
* Choose proper tooling for development
* Bus-factor: How many developers may be hit by a bus before the project fails ? Make it > 3
* Dependency tracking (vulnerabilities for different versions of dependency)
* Compartmentalize GitHub projects
* Create incident response process

For attackers your **supply chain** is a valid target. Hacking the chain between the code your developers wrote, the build system, the signature server, the update server and the updater on your customer's system has some benefits for the attacker:

* Several options to find weaknesses
* The potential to attack all the customers at once

Harden those systems. Be also aware of two more things:

### External software being part of your supply chain

All tools you use. All libraries you link to are part of your supply chain. An attacker can attack those to attack you and others. Maybe they are just the weakes link.

There are central components many use in their network or their build systems. Those are valid targets for the attackers. And there are several options for the attacker to attack you through those components

* Simply buy the company building them and silently add "special features"
* Hack those companies
* Pay an insider to insert extra code
* Modify the download server to server malicious components or just the old version - with vulnerabilities

The added special features can then threaten you build system, your network environment or your product

### You being part of someone else's supply chain

If you are building a software product others are using to run their network or build software you could be part of a supply chain attack.

Preventing attackers to modify your software is essential to protect everyone relying on you. A secured build environment, monitored access, signed binaries as output and secure update channels are key features you should have.


%% TODO: Tools to check for checked in credentials in detail
%% TODO: Reproducible builds in detail

## Further reading

### Security Engineering {#reference-book-security-engineering}

[Security Engineering by Ross J. Anderson](https://www.safaribooksonline.com/library/view/security-engineering-a/9780470068526/)

A book more focused on Designers/Architects. Lots of chapters with specific topics. Some may not be relevant for you. But as the book is very good you either soldier on or you cherry pick interesting chapters. No matter what of those you are doing: Read it.
