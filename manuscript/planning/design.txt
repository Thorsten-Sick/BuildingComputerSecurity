# Software Design {#chapter-design}

C> By Thorsten Sick

C> For Designers, Managers, Architects and Developers

Architecture and design already starts long before starting to code.
As it can also include preparing the environment, tools and getting the
requirement it has a blurred line to management tasks.

%% TODO: Kind of mention "Supply chain attacks" in infrastructure

%% TODO: Maybe split "processes in company" out of infrastructure (bug reporting, ...)

## Preparation

### Infrastructure

* Have an email address to report vulnerabilities to like security@domainname.com
* Add a PGP key for this address. And train everyone to use it properly
* Prepare a [security.txt](https://securitytxt.org/)
* Put it onto your homepage
* Prepare bugtrackers
* Have processes for handling vulnerabilities into the bugtracker
* Have an internal wiki to share experience and knowledge
* Collect "lessons learned" into this wiki

## Hardening Open Source Development

[34C3: Hardening Open source development](https://media.ccc.de/v/34c3-9249-hardening_open_source_development)

* Tools have their own package managers - maybe sandbox dev environment ?
* VCS can have shell code attached (git hooks) - use them
* Build environment could leak keys and credentials....verify that by tools
* Go for reproducible builds
* Trusting external lib repos (npm, ...) is tricky. Reduce dependencies
* Choose proper tooling for development
* Bus-factor: How many developers may be hit by a bus before the project fails ? Make it > 3
* Dependency tracking (vulnerabilities for different versions of dependency)
* Compartmentalize Github projects
* Create incident response process


%% TODO: Tools to check for checked in credentials in detail
%% TODO: Reproducible builds in detail

## Basics

### Fixing Bugs

The development phases are

* Planning/Design
* Coding
* Internal testing
* External testing (Beta)
* Release
* Maintenance

Fixing bugs in the early phases is quite cheap. While fixing a Design
bug (called "flaw") after Release can be horribly expensive - you have to
process the change through all the phases in between Design and Release.

TL;DR: Fix bugs early. Verify your Design.

### Data files

* Data files you use should contain a version number for the structure. This frees you to push new versions of the software which can open the old variant as well



## Complexity

Complexity kills. The more features you add, the more complexity will be added to the system. Complexity makes it harder to maintain the system and to secure it.
Be aware of your complexity budget and all your plans (see "updates") depend on that.

|Feature                           |  Complexity cost |
|----------------------------------|------------------|
|Network connection                |High              |
|----------------------------------|------------------|
|Wireless/Bluetooth                |High              |
|----------------------------------|------------------|
|OS (multi process)                |High              |
|----------------------------------|------------------|
|Passwords                         |Medium            |
|----------------------------------|------------------|
|External drives                   |Medium            |
|----------------------------------|------------------|
|life cycle <1 year                |Low               |
|----------------------------------|------------------|
|1-5 years                         |Medium            |
|----------------------------------|------------------|
|5+ years                          |High              |
|----------------------------------|------------------|
|Processes binary data (files, ...)|Medium            |
|----------------------------------|------------------|
|written in C/C++                  |High              |
|----------------------------------|------------------|
|Javascript...                     |Medium            |
|----------------------------------|------------------|
|JS with Frameworks                |High              |
|----------------------------------|------------------|
|Python                            |Low               |
|----------------------------------|------------------|
|Kernel drivers                    |High              |

## System architecture

* Isolate mission critical system from systems that can be DOS-ed. This will relax a ransom situation.
* Plan for recovery
* Plan for post incident analysis
* Avoid vendor lock in


## Further reading

### Security Engineering {#reference-book-security-engineering}

[Security Engineering by Ross J. Anderson](https://www.safaribooksonline.com/library/view/security-engineering-a/9780470068526/)

A book more focused on Designers/Architects. Lots of chapters with specific topics.
Some may not be relevant for you. But as the book is very good you either soldier on or you
cherry pick interesting chapters. No matter what of those you are doing: Read it.
