# Browser security {#chapter-browser-security}

C> By: Thorsten Sick

C> For: Architects, Developers

%%  State: 80 % Browser

Browsers are one of the most complex things running on your computer. They are
basically a small operating system.

They run code from external sources: scripts from homepages, extensions, PDFs.
They are the user interface to many of your devices at home
(WiFi access points, your NAS), They do your online banking, store your passwords and are
the main interface to the development process in your company (JIRA, GitHub).

Browsers are also built for user interaction  and forcing the user to decide
complex technical topics (for example: the certificate of a page is not valid).

A scary combination.

Even if you do not develop your own browser (I guess you do not...) there are
some things you should do to improve security of the browser you installed.

## Choosing the right browser

* Firefox is more privacy respecting
* Chrome more secure

Both are ok. There are other, more specialised browsers out there. But they
are built on the same foundations as Firefox or Chrome.

%% TODO: Check out more esoteric browsers. Tor browser, Brave

## Harden your browser

* Keep your browser up to date (your browser should do that)
* Keep the installed extensions up to date (your browser should take care)
* Install an Ad-blocker: UBlock Origin
* Install HTTPS-everywhere
* Install Privacy Badger
* If you are skilled: Install NoScript for Firefox

A more basic checklist is that you ensure three things are secured:

* The web server and it's content - it will be executed within your browser
* The network connection - TLS all the things
* The client side: Browser and Extensions

%% TODO: Check this and add links

%% TODO: pick the right extensions

## Basic browser security philosophy

The most essential philosophy in browser security is *compartments*.
Extensions are isolated from each other. Extensions have only a very
restricted ability to interact with web pages (and those depend on the manifest
they ship with).
Tabs and web sites are isolated from each other. IFrames are isolated in web
pages (with special arguments in the Iframe tag to further restrict their abilities).
The whole browser is sandboxed away from the system.

Being aware of those boundaries will help you to understand why some design
decisions first look strange and alien. Especially when developing Extensions
and web pages.

## Ads/Malvertizing

Advertising is one of the central ways malware is delivered to you.

The Ads you see online are very often not only pictures or animations - they
also contain scripts. Many have to contain them to property measure the impact
factor - which is relevant for the price that the advertising party has to pay.

Web pages are selling parts of the screen space to Ad companies. They either
re-sell it to other Ad companies or offer the space to entities who want to
advertise something.

So it is very unclear who is responsible for the ad you see embedded in a page.

As the Ads are targeted, the company paying to display the Ad can define who
will see it:

"Display it to older people who do a lot of online shopping and maybe banking
who surf with an old Internet Explorer"

And this is what makes it simple to spread malware and exploits in a very
reliable way.

Protection against this is an "Ad Blocker". If you do not have a favourite one yet:
*UBlock origin* is a good option.

## Privacy

Home pages contain trackers. They observe the usage of the pages and are
relevant for measuring the impact of specific articles or if people do find a
button on a page.

External companies offer these tracking services and are easy to embed - many
pages contain several types of tracker.

But those trackers are not only monitoring the usage of a specific page for
the page owners but are also able to follow a user while he is surfing
several pages and create a profile. This one can be sold to Ad companies for
targeted Ads.

There are projects to monitor pages for privacy features. Or you can just
check with your Privacy Extension how many trackers just got blocked.

[privacyscore](https://privacyscore.org/)

To protect yourself and do your own tracker-tracking use

[Privacy Badger](https://www.eff.org/privacybadger)

### Social Icons: Facebook and Twitter trackers

The Facebook and Twitter buttons you can find on many pages ("Share on Twitter")
are trackers: As soon as you see the Facebook button, Facebook knows you
visited this page. If you have a Facebook account you use with this browser:
It will have your Facebook identity.
If you do not have a Facebook account it will track you as pseudonymous id
until you create an account: after that it can link this to your id.

What exactly each of the companies is doing on their backend DB us unknown. But
this scenario is possible and the most likely one.

To protect yourself there are ways to **de-activate** the button until it is
**activated** with a first click. The the social media company will know - and
the user can use the button as normal.

Several Extensions offer this. Privacy Badger is amongst them.

[tracking through Social icons](https://threatpost.com/privacy-badger-extension-blocks-tracking-through-social-icons/107348/)

## Exploit Kits

Exploit Kits are simple to use tools. They help criminals run a large scale
attack on browser users to spread malware.

They offer a simple user interface to infect thousands of homepages with the
exploits. Once a user visits these pages the attack against the user is chose
based on the browser and flash version the user has. Success statistics are
available to the attacker.

If all the attacks against your browser failed, exploit kits can offer a so
called *social engineering* attack against the user. Like "Please download this codec to view this video now".

For a defender the take-aways are:

* A page that was benign yesterday can suddenly be malicious
* Attackers go for scale
* The do not necessarily target you, you just happened to be at the wrong place at the wrong time
* Several ways of attacks are tried against you until one succeeds
* Even if the system is hardened: The user is another vulnerability

%% TODO: Write Info source

[Banking trojans](https://www.virusbulletin.com/blog/2018/07/vb2017-paper-and-update-browser-attack-points-still-abused-banking-trojans/)

[Exploitkits Winter 2017](https://blog.malwarebytes.com/threat-analysis/2017/03/exploit-kits-winter-2017-review/)

%% TODO: Fallout Exploit kit https://www.nao-sec.org/2019/01/in-depth-analysis-of-new-fallout.html
%% https://malware.dontneedcoffee.com/2019/01/CVE-2018-15982.html#fallout


## Cookies

Cookies are essential for many homepages to work properly. The reason is that
there is not other way to memorize the history of a user
(even the most recent one) for a web server.

So it sets cookies (key and value pairs) in the user's browser. The browser
submits the cookies linked to a page whenever a new page is requested.

But the same technology can be used to track users and observe them.

In a browser blocking "Third party cookies" is a way to restrict information
leakage. These cookies are set by sub-content in a web site from third parties.

It is OK if the page offering a service to you is setting it's cookies. It is
bad if every third party content does that.

%% TODO Cookie security. Not in scripts and encrypted only. Lifetime

## Fingerprinting

Besides cookies there are other ways to identify a unique user. This is
called *fingerprinting*. By using as many system specific features that
are available in the browser as possible it creates a kind of unique id.

Screen size, languages, installed fonts, user agent, OS platform,
browser plugins ...

To test your own setup visit:

[Panopticlicks](https://panopticlick.eff.org/)
[Browserleaks](https://browserleaks.com)


## TLS/SSL/HTTPS

TLS (aka HTTPS or SSL) encrypts the connection between your browser and the server.
It also verifies the identity of the server.

There are several ways to enable HTTPS. Most of them depend on the admin or web designer
to set the right config.

One way to get some more encrypted connections out of the web to have your browser request them.
This can be done by the [HTTPS-everywhere](https://www.eff.org/https-everywhere) plugin.
Just install it.

There are more advanced use cases for TLS with the acronyms HSTS and HPKP where
the server promises to always use a certain encryption standard.
This is described in the [TLS chapter](#chapter-tls). On the browser side you
can access the HPKP and HSTS settings:

Chrome:

To make Chrome forget about the HPKP of a site visit:

chrome://net-internals/#hsts

*Query* your domain there to check the settings. After you found it, copy & paste it to *Delete Domain*.

Firefox:

It is either available through the history and right-clicking on an entry selecting "forget about this site"
or through fiddling with your profile.

For both browsers see more on [TheSSLStore](https://www.thesslstore.com/blog/clear-hsts-settings-chrome-firefox/)


%% TODO: Write CA trouble

%% TODO: write CT

%% TODO: Write HPKP Fingerprinting


## Facebook

[EFF howto change facebook settings](https://www.eff.org/deeplinks/2018/03/how-change-your-facebook-settings-opt-out-platform-api-sharing)

## BeEF

BeEF is a browser exploitation framework - it contains lots of attacks on browsers.
It does not necessarily exploit buffer overflow vulnerabilities in the
browser - escaping the sandbox - but invokes mayhem within the constraints
of web pages.

As BeEF is a very specific tool and not many people will require it it gets a
specific chapter - feel free to either read or skip it.

[See BeEF chapter](#chapter-beef)


## Burp Suite

Burp suite is a tool to check web pages for vulnerabilities. Vulnerabilities in
web sites lead to hacked web sites. Hacked web sites lead to web sites with
browser exploits (BeEF or Exploit Kits). Browser exploits lead to hacked
browsers after they visited this page.

So please harden your web sites if you run any. To help you do that there is the Burp Suite.
As it is very specific and more web-site security oriented I will just leave
this few lines here for the bigger picture and direct you to the specific chapter.

[See Burp chapter](#chapter-burp)

## Attack on Routers

As the browser is the configuration interface for your local network
(WiFi Access point, routers, ....) malware running in hacked pages can try to exploit
standard user names, vulnerabilities or long lasting login cookies to manipulate
the settings of your router.

A standard goal is to set the DNS used by your router to the attacker's DNS server.
Every entry there is the same as for an official DNS. Exceptions are: Banks
(now leading to phishing sites) and maybe update sites for your Anti-Virus
leading to nowhere.

Update your router, do not go for the cheap ones. Log out after configuration.
Maybe use a different browser profile or browser for Administration tasks  -
and not the one you use for browsing for cat videos.


%% TODO: [Novidade Exploit Kits vs. Routers](https://blog.trendmicro.com/trendlabs-security-intelligence/new-exploit-kit-novidade-found-targeting-home-and-soho-routers/)
%% TODO: [cryptojacking Routers turn browsers into zombies](https://nakedsecurity.sophos.com/2018/08/03/routers-turned-into-zombie-cryptojackers-is-yours-one-of-them/)
%% TODO: https://www.zdnet.com/article/hacking-attacks-on-your-router-why-the-worst-is-yet-to-come/

## Phishing

Phishing - social engineering users to get their credentials - will continue as
it is a very powerful attack.

Phishing is a social engineering attack but can contain steps that are
technical ("Please install our support software you can download here: https://..."),

As the goal is credentials browsers normally store them - and are also a part
of the social engineering aspect.

Besides blacklisting phishing sites user education is also an important step.

Many browsers do already blacklist phishing sites. If you want to build
something similar, Phishtank could be a source for your blacklist. Adding
internal data (submitted by aware users) to your blacklist is also smart. So if
several of your customers are targeted in parallel and the first one reports a
URL you protect the others by adding it to a blacklist.

%% TODO: [Phish report](https://github.com/MalwareReverseBrasil/phishreport)

%% TODO: [Amnesty phishing attacks](https://www.amnesty.org/en/latest/research/2018/12/when-best-practice-is-not-good-enough/)

%% TODO: [Spear Phishing](https://securityaffairs.co/wordpress/75033/hacking/industrial-sector-spear-phishing.html)

[Phishtank](https://www.phishtank.com)

%% TODO [Certstream phishing catcher](https://github.com/x0rz/phishing_catcher)

## Pseudonymity

A good way to protect yourself online is to create pseudonyms for our identity.#
Changing your real name and you home is hard if things go south (stalking,
mobbing, ...). But a pseudonym can be replaced. Nowadays having a pseudonym is
quite common and some people became famous without having to publish their real
identity.

This and the fact that Facebook want your account to be linked to your real
name should be good reasons to have one or more pseudonyms.

## Further reading

### The Browser Hacker's Handbook

[The Browser Hacker's Handbook by Michele Orru , Christian Frichot , Wade Alcorn](https://www.safaribooksonline.com/search/?query=The%20Browser%20Hacker%27s%20Handbook)
covers many attacks on web browsers. It's focus is on the BeEF framework.


%% ## Automating the browser and tests

%% TODO: [Selenium with Python](https://selenium-python.readthedocs.io/installation.html)
%% TODO: [Chromium automation clicks](https://medium.com/@aslushnikov/automating-clicks-in-chromium-a50e7f01d3fb)
%% TODO [BFuzz: Browser fuzzing](https://twitter.com/binitamshah/status/1058669688719376384?s=09)

%% TODO: [Debugger extension API](https://bugs.chromium.org/p/project-zero/issues/detail?id=1621)


%% TODO [Headless Chrome](https://www.imperva.com/blog/headless-chrome-devops-love-it-so-do-hackers-heres-why/)
%% TODO [Puppeteer](https://github.com/GoogleChrome/puppeteer/releases/tag/v1.9.0)



%% ## Spying Extensions

%% [Firefox spying extensions](https://www.techrepublic.com/article/firefox-users-beware-this-popular-add-on-could-steal-your-browsing-history/#ftag=RSS56d97e7)
%% [Mozilla removes spying extensions](https://www.bleepingcomputer.com/news/security/mozilla-removes-23-firefox-add-ons-that-snooped-on-users/)
%% [More extensions removed](https://hackercombat.com/why-mozilla-banned-23-firefox-add-ons-for-mining-user-data/)
%% TODO: Add CCC talk
%% TODO: Extensions can steal data: https://www.zdnet.com/article/websites-can-steal-browser-data-via-extensions-apis/

%% TODO: Spying chrome extensions https://www.tripwire.com/state-of-security/security-data-protection/malicious-chrome-extension-which-sloppily-spied-on-academics-believed-to-originate-from-north-korea/#new_tab



%% ## Censorship


%% TODO: [Censored pages in UK](https://www.blocked.org.uk/)

%% TODO: [Wayback machine](https://chrome.google.com/webstore/detail/wayback-machine/fpnmgdkabkmnadcjpehmlllkndpkmiak?hl=en-US)

%% TODO: [Oooni](https://ooni.torproject.org/)
%% TODO: [Netblocks](https://netblocks.org)

%% ## Hacked Shops

%% TODO [Magenta Shops](https://www.heise.de/security/meldung/Magento-Shops-Verwundbare-Add-ons-als-Schlupfloch-fuer-Kreditkarten-Skimmer-4204828.html)
%% TODO [Magecart](https://sensorstechforum.com/sites-magecart-malware-reinfected/)
%% https://www.riskiq.com/blog/labs/magecart-adverline/&utm_campaign=magecart_adverline&utm_source=twitter&utm_medium=organic&utm_content=magecart_adverline
%% https://blog.trendmicro.com/trendlabs-security-intelligence/new-magecart-attack-delivered-through-compromised-advertising-supply-chain/

## Crypto mining

Crypto mining became a new common attack in 2018. Miners can be written in
Javascript and run in the victims browser. Sandboxing and isolation will not
work because the miner is not accessing any outside resources. Just CPU and
network connectivity.
The damage for the user is monetary - the user has to pay the electricity bill.
The gain for the attacker is the bitcoins being mined. Side effect is a slow PC.

Miners can either be intentionally inserted in pages - with the user
willingliy paying for the page's content by mining.

Or hacked pages can contain miners. A third option is network infratructure
is inserting them (hacked routers) into unencrypted pages.

%% TODO: [Miner](https://www.virusbulletin.com/blog/2018/10/vb2018-paper-drive-download-drive-mining-understanding-new-paradigm/)


## Pony / Fareit

Pony, aka Fareit is a malware module. It is spread with other malware.
It's main tasks is to collect passwords on a computer. It especially targets
the internal password stores of browsers and FTP clients.

Those passwords are sent to the attacker.

For browsers this is relevant in several ways:

* The stores are secured against copying away from the computer. But they are not secured against attackers running software on that computer.
    * If hit by malware, change all the passwords stored in your local storage
* The stolen passwords are later used to infect innocent sites with malware
    * This is why they are targeting FTP clients

## Browser godmodes

### Chrome keyboard shortcuts

hotkeys CTRL+Shift+j => dev console
CTRL + L > Focus on url bar

%% TODO https://support.google.com/chrome/answer/157179

### Chrome command line parameters

Chrome has lots of command line parameters. Many are to assist development.
But as Chrome is a large project this also involves:

* Extension development
* Web server hardening
* Web page hardening

With so many moving parts (think: enabling additional security in the HTTP
header the server sends) things break. To sort out "what broke why" it is
possible to de-activate security features in the browser.

This can be essential to roll out new security.

This can be devastating when abused.

(some malware scripts start a browser with reduced security and point the
user to start banking).

As the command lines switches are constantly updated, this list will contain bugs.

#### Network Security

* no-referrers do no send referrers
* disable-web-security (same origin policy)
* safebrowsing-disable-download-protection
* safebrowsing-disable-extension-blacklist
* proxy-server proxy server configuration
* proxy-pac-url pac script to configure proxy server
* net-log-capture-mode Set events being captured in network log
* unsafely-treat--insecure-origin-as-secure special insecure treatment of urls in list
* disable-xss-auditor (reflective XSS)


#### Crypto security

* ssl-version-min minimum ssl version
* allow-insecure-localhost ignore tls errors on localhost
* allow-running-insecure-content http js in https pages allowed
* ignore-certificate-errors
* ignore-urlfetcher-cert-requests
* ssl-key-log-file log ssl key material to the given file
* enable-strict-mix-content-checking strict mixed content check (http in https)


#### Sandbox

* enable-sandbox enable sandbox for the process
* no-sandbox disable sandbox for all process types
* allow-no-sandbox-job lowers sandbox security
* allow-sandbox-debugging
* disable-setuid-sandbox
* enable-sandbox-logging mac os logging


#### Plugins/Extensions

* show-component-extension-options show pre-installed extensions
* disable-plugins de-activate plugins
* disable-extenions
* load-extension load extension <id> at startup
* allow-outdated-plugins do not block outdated plugins
* whitelisted-extension-id add to all the permission whitelists
* enable-crx-hash-check


#### Everything else

* reduce-security-for-testing
* incognito start in incognito mode
* purge-memory-button add button to purge memory
* noerrdialogs disable error dialogs

[Generated list of command line switches](https://peter.sh/experiments/chromium-command-line-switches/)

%% TODO: chrome://conflicts

### Special chrome URLs

I focus on the urls relevant for security or general purpose. There are many more.

* chrome://about List of all special URLs
* chrome://apps Installed Web Apps
* chrome://bluetooth-internals Your browser supports bluetooth
* chrome://chrome Version info
* chrome://components Plugins and similar browser components
* chrome://conflicts 3rd party components loaded into the browser process
* chrome://crashes Crash reports
* chrome://device-log Logging device interaction
* chrome://devices Add new devices (printer, Google cloud print...)
%% chrome://discards
* chrome://download-internals debugging downloads
* chrome://extensions Fancy extension dialog
* chrome://flags Toggle chrome experiments
* chrome://flash Installed flash player
* chrome://system Build information
%% chrome://gcm-internals
%% chrome://histograms
* chrome://history Access to the browser history
%% chrome://indexeddb-internals
* chrome://inspect Dev tools. Analyse pages, extensions, ...
* chrome://interstitials Access to all the warning pages (good for preparing presentations)
%% chrome://interventions-internals
%% chrome://invalidations
%% chrome://local-state browser state as json
%% chrome://media-internals For media debugging ?
* chrome://net-export Create NetLog dump of network traffic on disk
* chrome://net-internals network diagnostics. Also access to Certificate, HSTS and HPKP settings
* chrome://nbetwork-errors A list of network error pages (good for preparing presentations)
%% chrome://ntp-tiles-internals
%% chrome://omnibox Omnibox debug page
%% chrome://password-manager-internals
%% chrome://policy
%% chrome://predictors
%% chrome://print print dialog
%% chrome://quota-internals
* chrome://safe-browsing Safe browsing settings and statistics
%% * chrome://serviceworker-internals
%% chrome://settings Settings dialog
* chrome://signin-internals Account signin data. Maybe relevant for forensics
%% chrome://site-engagement
%% chrome://suggestions
%% chrome://supervised-user-internals Child protection
%% chrome://sync-internals
%% chrome://system System information
%% chrome://taskscheduler-internals
%% chrome://thumbnails
%% chrome://tracing
%% chrome://translate-internals
%% chrome://usb-internals
%% chrome://user-actions
* chrome://version Detailed version information. Good for support
%% chrome://webrtc-internals Audio debugging
%% chrome://webrtc-logs Audio debugging

%% ## Futuristic Technologies

%% ### Webassembly

%% TODO: [Web assembly](https://googleprojectzero.blogspot.com/2018/08/the-problems-and-promise-of-webassembly.html)

%% TODO: [Web Assembly](https://hacks.mozilla.org/2018/10/webassemblys-post-mvp-future/)

%% ## Web sockets

%% TODO: [Web Sockets](https://www.blackhillsinfosec.com/how-to-hack-websockets-and-socket-io/)

%% ## Web Apps

%% TODO: [Progressive web apps](https://medium.com/@kennethrohde/progressive-web-apps-coming-to-all-chrome-platforms-80e31272e2a8)



%% ## Harden accounts

%% Especially Facebook and similar privacy settings



%% OTHER THINGS

%% TODO: Malwarebytes browser extension [Malwarebytes](https://news.hitb.org/content/introducing-malwarebytes-browser-extension)

%% TODO: Banking malware vs. browsers: [Banking trojans](https://www.virusbulletin.com/blog/2018/07/vb2017-paper-and-update-browser-attack-points-still-abused-banking-trojans/)

%%  TODO: [Metasploit vs. browsers](https://blog.rapid7.com/2015/07/15/the-new-metasploit-browser-autopwn-strikes-faster-and-smarter-part-1/)



%% [Google Cloud Ultramem machines](https://cloudplatform.googleblog.com/2018/07/now-shipping-ultramem-machine-types-with-up-to-4tb-of-ram.html)

%% TODO: [CanOnion header idea - so pages can re-direct](https://twitter.com/AlecMuffett/status/1054789626156720134)

%% TODO: [HTTPLab (interactive web server)](https://github.com/gchaincl/httplab)

%% TODO: [deprecating SPDY](https://blog.cloudflare.com/deprecating-spdy/)

%% TODO: [Chromium sandbox on Linux](https://www.blackhoodie.re/assets/archive/Chromium_Sandbox_on_Linux_blackhoodie.pdf)

%% [How browsers work](https://developers.google.com/web/updates/2018/09/inside-browser-part1)

%% TODO [Encypted SNIs in Firefox](https://blog.mozilla.org/security/2018/10/18/encrypted-sni-comes-to-firefox-nightly/)

%% TODO [Firefox breach detection](https://blog.mozilla.org/blog/2018/11/14/firefox-monitor-launches-in-26-languages-and-adds-new-desktop-browser-feature/?utm_content=buffer1c277&utm_medium=social&utm_source=twitter.com&utm_campaign=buffer)

%% TODO: @icommitfelonies If a user on a compromised host is using Chrome, it's worth checking out their custom dictionary. C:\Users\targetUser\AppData\Local\Google\Chrome\User Data\Default\Custom Dictionary.txt
%% TODO: [Browser hijacker](https://sensorstechforum.com/remove-searchesresult-browser-hijacker/)
%% TODO [Data breaches and hacks](https://informationisbeautiful.net/visualizations/worlds-biggest-data-breaches-hacks/)
%% TODO: [Security changes in Chrome 71](https://www.helpnetsecurity.com/2018/12/05/chrome-71-security-changes/)


%% TODO; Chrome security override: Enter "thisisunsafe"

%% TODO: Google Chrome Drive-by-download protection: https://www.zdnet.com/article/google-chrome-to-add-drive-by-download-protection/

%% TODO: Infected chrome extensions: https://www.zdnet.com/article/razy-infects-legitimate-browser-extensions-to-steal-cryptocurrency/
%% https://threatpost.com/razy-browser-extensions-theft/141181/

%% TODO: Chrome university: https://www.youtube.com/playlist?list=PL9ioqAuyl6UIFAdsM5KU6P-hRJdh-BPmm


%% TODO: CSP bypass: https://blog.mazinahmed.net/2019/01/backchannel-leaks-on-strict-csp-policy.html

%% TODO: Browser architecture: https://developers.google.com/web/updates/2018/09/inside-browser-part1

%% TODO: URL Display guidelines https://chromium.googlesource.com/chromium/src/+/master/docs/security/url_display_guidelines/url_display_guidelines.md

%% TODO: XSS https://github.com/dxa4481/XSSOauthPersistence

%% TODO: List of test URLs
