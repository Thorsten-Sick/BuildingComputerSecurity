# Fuzzing {#chapter-fuzzing}

%% Run fuzzers in sandboxes / VMs !

Fuzzing inserts random data into the system with the goal to cause invalid states. This can crash the application, leak memory, cause unresponsiveness, trigger endless loops, create log storms ...

After you did set up fuzzing tools it runs full-auto for nights and collects crash logs and the data that caused the crashes.

You can send this generated data to any kind of input:

* Command line
* File
* Network data
* Images (camera)
* Audio
* UART/...
* UI (testing buttons, edit boxes, ...)
* System messages (MQTT, DBUS, ...)
* Shared memory
* Environment variables
* WiFi and Bluetooth
* at the library API (libfuzzer)

If you ship software that includes 3rd party libraries or programs, you should fuzz those as well. You ship it to customers with your tools - it becomes your responsibility.

If the project you ship involves 3rd party tools (DHCP client, DNS server, ...) remember you can fuzz them as well.

An important step in fuzzing is to keep the relevant input data for the debugging session later. At least keep the files in a separate folder. Some fuzzers have a predictable algorithm that generates the same permutations for a given seed. For those just keep the seed in a database and re-create the input data before debugging.

Dozens of fuzzers are available, from simple random data generators to coverage based like libfuzzer and AFL.
They have different advantages and disadvantages.

You should start with a simple variant if your program is not hardened yet. And while patching the bugs you find, you can improve the fuzzer.

## Training project

If you are looking for a practice target for fuzzing check out [Fuzzgoat](https://github.com/fuzzstati0n/fuzzgoat). It is a vulnerable C program to test your fuzzer.

As there are many kinds of fuzzers and you maybe want to experiment with them before getting started with your project.

## Fuzzing hardware

You can fuzz embedded devices. In addition to be able to send the broken data to the device (UART, BLE, ...) you also need a way to evaluate the system health.
Anything that works like a ping (like: request version information over WiFi) is already good.
Another thing: You want to be able to reset the device. LAN controlled power sockets offer a way. Or toggling the reset button using a micro controller and a small circuit.

## DIY fuzzer

It's quite simple to write own fuzzers. The tools later in this chapter will be much more powerful, but with some tricks the core concept of fuzzers is simple:

* Create data that has a *almost* valid structure. You want it to be processed code deeper in the victim's project
* For the same reason: Create *valid checksums* for your fake data
* An alternative is to de-activate the checksum-validation code while fuzzing the application
* Let it run for hours, maybe days
* Detect if you break the victim:
    * crashes,
    * buffer overflows (AddressSanitizer)
    * loops, hangs, ... (ThreadSanitizer)
    * memory leaks (LeakSanitizer)

%% TODO: Valgrind is also an option to detect buggy behaviour

* As soon as you break the victim: Store the responsible data chunk away for the debugging session

To improve the fuzzing results, sprinkle the victim code with *assertions* to
provoke crashes on invalid states.

Fuzzers can be simple, see the next example:

Simple [DNS fuzzer](https://github.com/sgayou/medfusion-4000-research/blob/master/doc/README.md)

{lang="python"}
    import socket
    import os

    UDP_IP = "192.168.100.151"
    UDP_PORT = 53

    sock = socket.socket(socket.AF_INET,
                     socket.SOCK_DGRAM)
                     sock.bind((UDP_IP, UDP_PORT))

    while True:
        data, addr = sock.recvfrom(1024)
        packet = str(data[0]) + str(data[1]) + b"\x81\x80" + os.urandom(128)
        sock.sendto(packet, addr)

## Radamsa

[Radamsa](https://gitlab.com/akihe/radamsa)

Radamsa is a smart data permutation engine. Sending this permuted data into the program to fuzz and handling crashes is your responsibility. The Radamsa README has some very good examples how to do that.

A simple way to detect crashed programs in bash scripts is to check the exit value.

Taking an example from Radamsa (check out the link, there are more examples).

{lang="bash"}
    while true
     do
       # Generate test-sample files
       # call program with sample files
       test $? -gt 127 && break
     done

## Dharma

A simple Grammar language lets you define the structure of the data to generate. This is a solution for more complex data formats. Full random would lead to many inputs rejected quite early by sanity checks in the target.

https://github.com/mozillasecurity/dharma

%% ## Format Fuzzer
%% %% For binary formats like images: https://github.com/uds-se/FormatFuzzer


## AFL American fuzzy lop


%% Coverage guided mutation based fuzzing

%% It needs re-compilation. This is why you need the source.

AFL is a very sophisticated fuzzer. It uses compile-time instrumentation and a genetic algorithm to discover new test cases. For that it does a *Code Coverage* on the victim binary and tries to create data in a way that every existing code path is used.

Pro:
    * Fast
    * Exhaustive

Con:
    * It needs instrumented binaries - you have to re-compile them

{lang="bash"}
    apt install AFL

To use AFL the program must be compiled with a special AFL compiler. AFL is available for clang (afl-clang) and gcc (afl-gcc).

After compiling you call it with *afl-fuzz*.

A good example is the *fuzzgoat* project which has a vulnerable program and a Makefile to show how AFL is compiled into it and then executed.

The home page of [AFL](http://lcamtuf.coredump.cx/afl/)

Some [technical overview](https://tunnelshade.in/blog/2018/01/afl-internals-compile-time-instrumentation/)

The best resource so far is the README:

*/usr/share/doc/afl-doc/docs/README*

on your system if you installed the package.

## libFuzzer

%% Coverage guided mutation based fuzzing

%% Compared to AFL: It fuzzes a function (not a process) and this makes it faster. But there is more manual work.

The most effective way if you have access to the API and code - a part of Clang 6.0+.
Clang is available for Ubuntu 18.4

You may notice: Ubuntu 17.10 does not have this Clang installed yet. You will want to install a Clang 6.0 from a PPA.

[LibFuzzer](https://llvm.org/docs/LibFuzzer.html)

LibFuzzer supports a Corpus for Input and Output samples to test with. This improves speed a lot.

%% .. TODO: more libFuzzer


%% ## AFL-Unicorn
%% Fuzz any binaries (especially firmware) without havingthe source. Supports several arhcitectures
%% https://medium.com/hackernoon/afl-unicorn-fuzzing-arbitrary-binary-code-563ca28936bf
%% https://github.com/Battelle/afl-unicorn

## More fuzzing tricks

* Parallelize fuzzing
    * Google's [ClusterFuzz](https://github.com/google/oss-fuzz/blob/master/docs/clusterfuzz.md) for example
* Do it on Linux. It has more powerful monitoring tools for dynamic code analysis
* Fix found bugs ASAP, so your fuzzer can dig deeper
    * Some smart fuzzers can cluster the crashes by the bugs they belong to

%% ## Interacting with the target:

%% If it is a Windows GUI:

%% * Pywinauto https://pywinauto.readthedocs.io/en/latest/ to click all the buttons
%% * Pyperclip https://pypi.org/project/pyperclip/ to transfer the manipulated data. It is cross platform

%% With pywinauto you can also check for popping error dialogs


%% ## Automated crash analysis

%% Windows: Bugid https://github.com/SkyLined/BugId
%% Linux:
%% * https://github.com/pwndbg/pwndbg
%% * https://github.com/jfoote/exploitable


%% ## Minimizing input

%%Lithium https://github.com/MozillaSecurity/lithium

%% ## JVM fuzzing (Java, Kotlin)

%% Coverage guided
%% Jazzer: https://github.com/CodeIntelligenceTesting/jazzer
%% https://www.code-intelligence.com/blog/engineering-jazzer
%% https://media.ccc.de/v/froscon2022-2772-introduction_to_modern_fuzzing

%% ## JS fuzzing

%% https://github.com/CodeIntelligenceTesting/jazzer.js


%% Comes with examples


%% ## Sanitizers

%% To turn issues into crashes. Expect a slowdown

%% ASan (Adress), MSan (Memory), UBSan (Undefined Behaviour) , TSan (Thread)

%% JVM: Bug detector


## Further reading

Page 50 called "Fuzzing Essentials" of [PagedOut 2](https://pagedout.institute/download/PagedOut_002_beta2.pdf) contains a good check list for your fuzzing project.

%% https://media.ccc.de/v/mch2022-180-bug-hunting-for-normal-people


%% https://www.dedoimedo.com/computers/crash-book.html

%% Should be in this book above: https://www.dedoimedo.com/computers/crash.html

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% TODO: Continuous fuzzing [Clusterfuzz](https://opensource.googleblog.com/2019/02/open-sourcing-clusterfuzz.html)
%% OSS-Fuzz by google: Clusterfuzz for Open Source software, OneFuzz is the similar tool by MS

%% TODO run under Valgrind or strace or gdb

%% [Naughty strings](https://github.com/minimaxir/big-list-of-naughty-strings)


%% TODO: Good example on how to handle bugs found by fuzzer: [Fuzzing Counter-Strike: Global Offensive maps files with AFL](https://phoenhex.re/2018-08-26/csgo-fuzzing-bsp)

%% [Fuddly Framework](https://github.com/k0retux/fuddly)


%% PAPER:

%% TODO: [Fuzzing: Art, Science, and Engineering](https://arxiv.org/pdf/1812.00140.pdf)
%% TODO: [Angora: Efficient Fuzzing by Principled Search](https://arxiv.org/abs/1803.01307)
%% TODO: read: [What You Corrupt Is Not What You Crash:
%% [Challenges in Fuzzing Embedded Devices](http://s3.eurecom.fr/docs/ndss18_muench.pdf)



%% TODO: [Wax fuzzing](https://github.com/evilsocket/wax)

%% TODO: [Dirbursting](https://github.com/Bo0oM/fuzz.txt)
%% And: [DNS XSS](https://bo0om.ru/en/)

%% TODO: [WinAFL](https://github.com/googleprojectzero/winafl/blob/master/readme_pt.md)

%% TODO: [Deep State API Fuzzing](https://blog.trailofbits.com/2019/01/22/fuzzing-an-api-with-deepstate-part-1/)

%% TODO: [JS Engine fuzzing](https://github.com/googleprojectzero/fuzzilli)


%% TODO: Fuzzing basics: https://labs.mwrinfosecurity.com/blog/what-the-fuzz
%% Network protocol fuzzing: https://blog.own.sh/introduction-to-network-protocol-fuzzing-buffer-overflow-exploitation/

%% TODO: More network fuzzing: https://hakin9.org/fuzzowski-the-network-protocol-fuzzer-that-we-will-want-to-use/

%% TODO: https://github.com/mxmssh/manul coverage guided cross platform fuzzer


%% TODO: Check out "spike": network based fuzzing

%% TODO: Check AFL QEMU integration, This will work on non-instrumented binaries

%% TODO: Check Honggfuzz  https://github.com/google/honggfuzz

%% TODO: Combine fuzz engines by swapping input samples. That way they will cover each other's weaknesses.

%% TODO: Book "Building Secure and Reliable Systems", chapter 13

%% TODO: Special compile flag -DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION

%% TODO: OSS Fuzz: https://google.github.io/oss-fuzz/

%% TODO: Put python fuzzer either here or into python: https://github.com/google/atheris

%% TODO: Game fuzzing using snapshots: http://blog.ret2.io/2021/07/21/wtf-snapshot-fuzzing/

%% Grammar based fuzzing:

%% Linux kernel: syzkaller, coverage guided kernel fuzzer https://xairy.io/articles/syzkaller-external-network

%% TODO: Java fuzzer https://www.code-intelligence.com/blog/engineering-jazzer

%% Other vulnerability classes than memory corruption (SQLI, XSRF): https://security.googleblog.com/2022/09/fuzzing-beyond-memory-corruption.html

%% They want to make fuzzing simple: https://github.com/CodeIntelligenceTesting/cifuzz

%% https://github.com/fuzzdb-project/fuzzdb

%% Security lists, including fuzzing seeds https://github.com/danielmiessler/SecLists