# Testing practice {#chapter-testing}

Testing is an engineering practice. Almost all current projects are at a size that "one person and a checklist" are **NOT** an option for testing.

Instead automated tools and scripts are used.

Today a tester needs the skills and mindset of:
* engineering
* programming
* hacking
* administration

Best case is to have CI (continuous integration) or at least a *vagrant* environment you can deploy anywhere and run the tests automated.

## Have testers

Have those guys with the magic abilities to break things. Make them break your product. The more the better. The quality contribution they add scales by
numbers of testers.

While the number of broken code also scales - by number of developers...

Many teams are using the coders to also test. But they subconsciously avoid tricky situations and will not find the issues.

## What to test

Just a few ideas what you can test

* The application you developed
* The infrastructure it depends on (databases, certificates, web servers)
    * The up time of this infrastructure
    * If the certificates are still valid
    * If the certificates are accepted by relevant browsers
* The update status of the operating system on your infrastructure
* If third party tools got critical updates you did not deploy yet
    * Libraries
    * Compilers
    * Tools
    * Operating systems

%% ## Infrastructure tests

%% Compliance tests automation

%% [Inspec](https://www.inspec.io/)

%% [Inspec on Github](https://github.com/chef/inspec)

%% TODO: Test it

%% Also: [CIS for Ubuntu](https://www.cisecurity.org/benchmark/ubuntu_linux/)

%% TODO: Lynis security auditing for Linux
%% [Lynis](https://linuxsecurity.expert/tools/lynis/)
%% [Lunar](https://linuxsecurity.expert/tools/lunar/)

## Unit tests

Unit tests are tools to assist developers during development and guarantee a certain behaviour of interfaces.

This prevents re-factoring from breaking other code.
Second use of unit tests: Write tests to verify external libs behave the same API after updates. This reduces risk from updating external libraries - and makes it easier to do that after vulnerabilities are found there.

## Verification tests

Verification tests are scripts that remote control the application and check if all promised features work as expected.

These tests should check the application and the environment (servers).
If full automation is achieved, they can be run daily.

This kind of tests finds *broken features* and *expected bugs*.

## Performance tests

(Distributed) Denial Of Service attacks (DDOS) are attacks where a system resource is depleted. If your servers, your apps or any other part of your
system faces a hostile environment you should test performance with a focus on potential DDOS-able resources. Can the attacker deplete:

* Network connections
* Network bandwidth
* Memory
* CPU
* Hard disk space
* Database space

Quotas or a re-design can prevent the attacker from wasting your or your other user's resources.

## Destructive testing

[Fuzzing](#chapter-fuzzing) and similar tests aim to find bugs no one expected.

They should run in parallel to normal development. Bugs found that way are added to the verification tests to avoid them popping up again at a later stage.

## External reviews

Hire external companies to verify your *software design* and your *code*. This is two separate reviews.
If you are on a limited budget: Verify final product and pray there are no design flaws that would force you to change the design and fix the code afterwards.

There are basically two kinds of tests: *white box testing* and *black box testing*:
While white box testing (testers get documentation and source code) will give you more found bugs for your money - black box testing will give you the hacker feeling and as a stunt can maybe better convince your managers to invest into security.

Go for white box testing.

## Bug bounties

Bug bounties are bounties offered by a company to external testers for finding bugs.
There are several online portals offering management of these tests.

There are a lot of caveats.

* You need an internal process for external input
* You need testers to verify the external reports
* You should have picked the low hanging fruit bugs already
    * Or you will get reports for things you already know
* It does not replace internal testers
* It does not replace external reviews by experts
* You can not guarantee a good coverage
    * Maybe no one inspects your bugs because you are not paying enough
    * Maybe all those uncoordinated volunteers just focus on one part of your program

On the pro side are:

* It is good PR
* It *can* turn up unexpected issues because you could attracted people not used to your company internal box of thinking


%% TODO: Code coverage


## Further Reading

### Test Driven Development for Embedded C by James W. Grenning

The book [Test Driven Development for Embedded C](https://www.safaribooksonline.com/library/view/test-driven-development/9781941222997/) guides you through the task of unit-testing your embedded applications.
Most of the tips can be used for any kind of C project. But the additional benefit of this book is to also cover the more complex embedded environment.
