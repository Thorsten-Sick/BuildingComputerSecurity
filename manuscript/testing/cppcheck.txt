# Cppcheck {#chapter-cppcheck}

Cppcheck is a more advanced static code analysis tool than flawfinder. The drawback: It is more complicated.

Where flawfinder checks with string searches for dangerous function calls, Cppcheck compiles the program to go more in depth. It does care for the
structure of the program - which flawfinder just can not do.

These more complex pre-processing steps are the base for the additional fancy features Cppcheck offers.

You can find Cppcheck here:

[CppCheck](http://cppcheck.sourceforge.net/)

And a detailed documentation here:

[CppCheck Manual](http://cppcheck.sourceforge.net/manual.pdf)

On Ubuntu just install it with

{lang="bash"}
    sudo apt install cppcheck cppcheck-gui

There is a MSI installer for Windows as well.

## The Makefile

As you basically call CppCheck like any compiler you can integrate it into your default Makefile as a specific target.

A

{lang="bash"}
    make cppcheck

would then run CppCheck.

## Feature: Library verification

CppCheck checks if library functions are used as intended. It knows about the standard libraries. If you use less common ones you should add your own
configuration for those. The CppCheck manual has more about that.

To edit the configuration file for the library use the CppCheck GUI.

If the library is a common and public one, you may think about contributing the configuration to the CppCheck project.

Now for the extra trick: If your team produces in-house libraries you should generate one of those config files and ship it with the library. This enables others to properly use the library. And improves code quality and reduces silly
bug reports to your team.

%% TODO ## Feature: MISRA

%% TODO ## Feature platform

A feature that can assist you customizing the checks to cover your needs is dumping the data and processing it with Python.

Existing python tools are in the *addons* folder of CppCheck.

{lang="bash"}
    cppcheck --dump --enable=all --std=c99 c_file.c
    # result: c_file.c.dump
    python naming.py --var='[a-z]*\Z' --function='[A-Z].*' /media/sf_work/feolib_trunk/pal/tests/sio.c.dump
    # Remember: \Z is end of string !

## Further reading

* [CppCheck Source](https://github.com/danmar/cppcheck)
* [Web Page](http://cppcheck.sourceforge.net/)

%% TODO: Plugins, VCS hooks, Continuous delivery hooks and how-to-use-them
