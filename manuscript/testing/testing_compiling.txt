# Testing compiled binaries {#chapter-testing-compiling}

C> By: Thorsten Sick

C> For: Developers, Tester

As many mitigation features are kind of invisible you will needs tools
to test the compiled binary before you release it.

You want to automatically test:

* Is this a beta release or the real one ?
* Is it a debug release ? (with or without debug symbols)
* Is ASLR on ?
* Are there additional dependencies ?
    * linked libs ?
    * attached info (see there)

Having prepared a set of tools for manual verification plus a automatic test
at least before the binaries are shipped is very smart.

## Linux

On Linux, a tool to verify the hardening settings is *hardening-check* which can
be found here:

[Hardening-check](https://github.com/ProhtMeyhet/hardening-check)

It will check for:

* PIE (ASLR)
* Stack protection
* Fortified source
* Read-only relocations (relro)
* Immediate binding

You can do many of these verifications using built-in tools.

Testing specifically for **immediate binding** manually:

{lang="bash"}
    readelf -d program | grep BIND

On a secure program you will get something like:

{lang="bash"}
    0x000000000000001e (FLAGS)              BIND_NOW

Insecure programs will return nothing.

If you do not get the BIND_NOW (which would indicate *full relro*)
you can still check for *partial relro*:

{lang = "bash"}
    objdump -x program|grep RELRO


Checking for **forgotten debug symbols** in a secure program:

{lang="bash"}
    >objdump --syms program

    program:     file format elf64-x86-64

    SYMBOL TABLE:
    no symbols

If you see anything else (especially a list of symbols) you forgot them in
the binary. Remove them by calling the command line tool *strip*.

%% Also relevant for "elf_format.wip": [ELF format](https://linux-audit.com/elf-binaries-on-linux-understanding-and-analysis/)

### Dynamic libraries

To show the used dynamic libraries of a program, use:

{lang="bash"}
    ldd <program>

**Important: Only use that on trusted programs ! It can execute code**

ldd will invoke ld and monitor the loaded .so files. This works recursively.

lddtree does display a more fancy tree.

If you do not trust a program you can get similar results by calling

{lang="bash"}
    objdump -p /path/to/program | grep NEEDED


%% TODO: apt install pax-utils; scanelf

## Windows

Check for ASLR, DEP, SafeSEH, ... in Windows binaries. There is a powershell tool on github:

[PESecurity](https://github.com/NetSPI/PESecurity)

But I prefer to create my own python tools. They are simpler to integrate into my other tools.

And using *pefile* it is quite simple to write.

{lang="python"}
    import pefile
    pe = pefile.PE("test.exe")
    features = [('IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA', 0x0020),
                ('IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE', 0x0040),
                ('IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY', 0x0080),
                ('IMAGE_DLLCHARACTERISTICS_NX_COMPAT', 0x0100),
                ('IMAGE_DLLCHARACTERISTICS_NO_ISOLATION', 0x0200),
                ('IMAGE_DLLCHARACTERISTICS_NO_SEH', 0x0400),
                ('IMAGE_DLLCHARACTERISTICS_NO_BIND', 0x0800),
                ('IMAGE_DLLCHARACTERISTICS_APPCONTAINER', 0x1000),
                ('IMAGE_DLLCHARACTERISTICS_GUARD_CF', 0x4000),
                ]
    for s, h in features:
        print("{}: {}".format(s, bool(pe.OPTIONAL_HEADER.DllCharacteristics & h)))

Those PE features can be set by th compiler/linker or the tool editbin.
[Microsoft has a good documentation](https://docs.microsoft.com/en-us/cpp/build/reference/linker-options?view=vs-2017)

One of the first things you should do is to compile for 64 bit. It enables more seurity features:

* IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA
* The SEH is secured automatically

### Description of the fields

* IMAGE_DLLCHARACTERISTICS_HIGH_ENTROPY_VA: Use 64 bit space for ASLR. True is good
* IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE: Use ASLR. True is good
* IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY: Signature check on startup. True is good
* IMAGE_DLLCHARACTERISTICS_NX_COMPAT: Executable is compatible with DEP. True is good
* IMAGE_DLLCHARACTERISTICS_NO_ISOLATION: If set will not look for manifest file. False is good
* IMAGE_DLLCHARACTERISTICS_NO_SEH: Does not contain exception handlers. True is good. But see below
* IMAGE_DLLCHARACTERISTICS_NO_BIND: Signed files should not be bound, invalidates signature. True is good
* IMAGE_DLLCHARACTERISTICS_APPCONTAINER: Run only in process isolation. True is good
* IMAGE_DLLCHARACTERISTICS_GUARD_CF: Control Flow Guard - Check assembler call targets during runtime. True is good

SEH: Structured Exception Handlers can be abused by exploit code. Having them is dangerous. Except:

* Safe SEH is used (can be verified in PE, but is tricky)
* PE is 64 bit compiled - then the SEHs are secured automatically
* Or SEH is deactivated

Best way is to go for 64 bit.

%% TODO [CheckSec](https://github.com/slimm609/checksec.sh)

%% TODO: [Searching statically-linked vulnerable library functions in executable code](https://googleprojectzero.blogspot.com/2018/12/searching-statically-linked-vulnerable.html)

%% TODO: Show imports of PE files: how ?

## Attached info

It is possible to attach an info blob (like xml) to a PE and ELF file. Directly after you compiled the binary, your build tool could create that info blob
and your release system could later verify it - to be sure to release the intended version of the file. It can contain things like a "beta" flag - to avoid accidentally release a beta on the stable update channel and version numbers - to ensure to release the proper version. Or it could be a list of dependencies (modules and their version) to other components you offer.

Of course this can also be achieved by registering the binary in your file database by sha256 and putting the flags in there.
