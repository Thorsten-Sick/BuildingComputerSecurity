# Code Coverage {#chapter-code-coverage}

Unit testing and Code Coverage are symbiotic. Code coverage gives you metrics which amount of the program code was called by the tests. And which
code lines need more testing. It will also give you nice numbers to wave in front of management and explain the achievements of the last week spent
writing tests (Pro tip: Create before and after numbers).

If you have existing code and you want to add unit tests on top it is wise
to first build your code coverage environment. Which is not as hard as it
sounds because it is just compile switches and a tool to post process the
raw data.


## GCC

{lang="bash"}
    gcc --coverage -fprofile-abs-path

* coverage activates the generation of code coverage data
* fprofile-abs-path is essential if you spread your code files over several directories

After compiling you program (better: the unit tests for your program) that way,
you just execute the unit test binary. As a result it will output *gcda* files.
One for each involved C source file.

You combine those files into a report by calling

{language="bash"}
    gcov *.gcda

Which results in an overview and *gcov* files. The gcov files are annotated
source files.
The lines start with number of executions. Not-executed lines with lots '#####'.
Next number is the line number followed by the source code.

The tool gcov has many more options, especially different output formats.
After you got the basics running check these options out. One of them might
fit your need much better than the default output.

Next step is to go looking for none executed lines and start testing them to
improve your score.


%% TODO: [CLANG Source BAsed Coverage](https://clang.llvm.org/docs/SourceBasedCodeCoverage.html)

%% TODO: [Gcov Documentation](https://gcc.gnu.org/onlinedocs/gcc/Gcov.html)

%% TODO: LCOV
