# IoT security {#chapter-iot}

C> By: Thorsten Sick

C> For: Architects, Developers, Tester

IoT is cheap embedded devices with (optional) network connectivity.
They have their own security challenge plus many things from the network chapter.

## Class break

A thing very relevant for IoT devices is the *class break* (it is still relevant
for many other systems, but here it is devastating).

Class breaks is when a vulnerability exists in all devices of a specific class.
The adversary buys one of the devices (maybe second hand on eBay) and has
plenty of time to hack it. The attack itself can then be described (blog posts)
or weaponized - simple to use scripts are created for everyone to run the attack.

Now the whole class of this device is broken. Anyone can use this knowledge to
hack any device of this specific class.

Class breaks hit IoT especially hard because quite often they can not be
updated, are easy to get and a break will hit thousands or millions of devices.

## Interfaces (UART, JTAG)

Interfaces like JTAG or UART are very convenient for development or debugging.
UART is a serial interface that can be used to accept commands or at least
send logging data.
JTAG is an official debugging interface to debug the firmware.

Controlling them is a big step for an attacker towards takeover of the device.

Sometimes an embedded device has connectors for those interfaces soldered
already. If not it is at least very likely there are the solder points to
attach them.

There are several options you have to lock them down. All of them have side
effects and weaknesses.

* Use #ifdefs to kill the code for UART for the production release
    * Side effect: Can not be used to debug in-the-field
* Set a password for UART. Password must be entered before getting logs or sending commands
    * Side effect: Technicians can leak password
    * Side effect: Password can be found in firmware (*strings* command or similar)
* Build password by code at runtime
    * Weakness: Better than hard coded password (strings does not work)
    * But: Attackers with disassembly skills can break it
    * Weakness: Leaks by support engineers still possible
* Burn Micro controller fuse to break UART and JTAG right before shipping
    * Side effect: No field debugging possible anymore
    * Burnt fuses can be overridden...with lots of effort, but it is possible
* Public key challenge response to access debugging functionality
    * Side effect: Complex
    * Side effect: Needs computational power

### Public key challenge response

This is a very complex option to solve the interface problem and so be warned:
As I do not know your specific situation I will just give you some hints now
and you will have to fill in your specifics.

A public key pair is created for each device. The secret key stored on the server.
If someone wants to access a IoT device it creates a unique and random challenge.
The Support Technician can contact the server and forward the challenge together
with the device ID. The server signs the challenge with the device specific
secret key. The device gets the signed challenge and verifies:

* Is this my current challenge ?
* Is it signed by the secret key matching my public one ?

If both are true the device allows debugging access.

Of course the support Technician also needs to authenticate himself at the server...

This is all a bit much for a WiFi enabled toaster. But maybe in some cases this
kind of approach is the right size of paranoia.

%% encrypted MQTT
%% [teserakt](https://teserakt.io/)


%% ## Incidents

%% [Medical device hacking](http://www.ehackingnews.com/2018/05/medical-devices-now-vulnerable-to-cyber.html)

%% ## Secure MQTT

%% [Install and secure Mosquitto](https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-the-mosquitto-mqtt-messaging-broker-on-ubuntu-18-04-quickstart?utm_medium=social&utm_source=twitter&utm_campaign=mosquito_quickstart_tut&utm_content=no_image)


%% [Hardsploit: Metasploit for hardware](https://media.ccc.de/v/32c3-7496-hardsploit_a_metasploit-like_tool_for_hardware_hacking)
%% Routersploit: https://github.com/threat9/routersploit

%% TODO: https://medium.com/read-write-participate/university-of-dundee-and-mozilla-announce-doctoral-program-for-healthier-iot-d1cc3f568e53

%% %%%%%%%%%%%%%%% Automotive
%% OTA Tesla hacking
%%  https://i.blackhat.com/us-18/Thu-August-9/us-18-Liu-Over-The-Air-How-We-Remotely-Compromised-The-Gateway-Bcm-And-Autopilot-Ecus-Of-Tesla-Cars.pdf
%% https://thehackernews.com/2018/05/bmw-smart-car-hacking.html
%% https://keenlab.tencent.com/en/Experimental_Security_Assessment_of_BMW_Cars_by_KeenLab.pdf
%% https://www.scmagazine.com/luxury-hackers-crack-bimmers-and-benzes-a-tale-of-bmws-bugs-and-mercedes-benz-thugs/article/768267/
%% https://www.bleepingcomputer.com/news/security/volkswagen-and-audi-cars-vulnerable-to-remote-hacking/

%% %%%%%%%%%%%%%%%%% Routers
%% https://thehackernews.com/2018/05/hacking-gpon-routers.html
%% https://thehackernews.com/2018/05/vpnfilter-botnet-malware.html
%% https://www.kaspersky.com/blog/roaming-mantis-malware/22427/

%% Pentest hardware book (review): https://github.com/unprovable/PentestHardware
